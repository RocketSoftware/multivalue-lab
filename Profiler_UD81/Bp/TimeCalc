Subroutine TimeCalc(Answer,TimeDataRecord,Id,IsTopLevel)
******************************************************************************
*
*     Calculate the time for one Profile record
*
*     Module %M%    Version  %I%   Date  %H%
*
*	IBM Confidential
*	OCO Source Materials
*	Copyright (C) IBM Corp.  2005
*
*     (c) Copyright 2005 IBM Corp. - All Rights Reserved
*     This is unpublished proprietary source code of IBM Corp.
*     The copyright notice above does not evidence any actual or intended
*     publication of such source code.
*
*******************************************************************************
*
*     Maintenence log - insert most recent change descriptions at top
*
*     Date.... ECase WHO Description........................................
*     02/02/05       MAB Created Module
*
*******************************************************************************

* This routine calculates the per-unit time used for test Id, less 
* Iterations * ForNext and any sub-parts

* ReportingTest: @true/1 indicates reporting test and @record and @id contain
* the reporting data.  
* @false/0 means we are calculating subtest time per iteration for backing out 
* of a reporting test.

* This form allows listing any file, rather than just TRANSing to PROFILE.

* Unless specified, we do 10 of the test per loop iteration 
* in the test under test

$include IncludeFile Scaffold_Layout
$include IncludeFile Profile_Layout

* TimePerForNext is the time for each iteration of a FOR/NEXT loop.
* This is used to back out this value for each test.
* AtFileNameOpen tells us if the file handle for @file.name is open
* AtFileName lets us know if we are using the same @file.name as last time.
* fAtFileName is the file handle for AtFileName

$include Include TimeCalcCommon

if AtFileName # "Profile" then
	AtFileNameOpen = 0
end
if not(AtFileNameOpen) then
	open "Profile" to fAtFileName then
		AtFileName = "Profile"
		AtFileNameOpen = 1
	end else
		print "Cannot OPEN Profile"
		return
	end
end

*if @reccount = 1 then
if NumRecords = 1 then
	* Recalculate FOR/NEXT for COMMON, in case it changed.
	TestNumber = 1
	gosub FormatTestNumber
	read ForNextRecord from fAtFileName,TestNumber else
		print "Cannot READ Profile,":TestNumber
		return
	end
	* We cannot call OneIteration here, or we will have the value of
	* a FOR/NEXT minus the same value, yielding zero.
	call CalculateMean(Mean,ForNextRecord<PROFILE_CPU>,ForNextRecord<PROFILE_ITERATIONS>,MeanIterations)
	if len(Mean) = 0 then
		TimePerForNext = 0
	end else
		TimePerForNext = Mean
	end
end
if Id = 1 then
	* This *is* the base FOR/NEXT timing
	Answer = TimePerForNext
end else
	call OneIteration(TimeValue,Id)
	Answer = TimeValue
	return

end
return

$include Include FormatTestNumber

