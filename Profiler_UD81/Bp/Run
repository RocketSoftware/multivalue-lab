program Run
******************************************************************************
*
*     Run performance tests
*
*     Module %M%    Version  %I%   Date  %H%
*
*	IBM Confidential
*	OCO Source Materials
*	Copyright (C) IBM Corp.  2005
*
*     (c) Copyright 2005 IBM Corp. - All Rights Reserved
*     This is unpublished proprietary source code of IBM Corp.
*     The copyright notice above does not evidence any actual or intended
*     publication of such source code.
*
*******************************************************************************
*
*     Maintenence log - insert most recent change descriptions at top
*
*     Date.... ECase WHO Description........................................
*     02/02/05       MAB Created Module
*
*******************************************************************************

*$options DEFAULT

$include Include OSSpecific
$include Include TimeCalcCommon

$include IncludeFile FailureEquates

$include IncludeFile Profile_Common
$include IncludeFile Profile_Layout
$include IncludeFile Profile_Open
$include IncludeFile Scaffold_Common
$include IncludeFile Scaffold_Layout
$include IncludeFile Scaffold_Open

gosub Initialize

gosub ScaleTests
gosub CountEachTest
SetCountOption += 0; * Make numeric
gosub SelectTests
gosub SetHeading
gosub DeterminePlatform
gosub RunTests

AllDone:
********
print
print "All done."
stop

SetHeading:
***********
Head1  = "Test" : " " : "Category" "20L" : "Loop Core" "25L"
Head1 := "Iterations" "10R" : "Wall" "6R" : "CPU" "9R"
Head2  = space(50) : ' ' "10R" : '(Sec)' "6R" : '(mSec)' "9R"
if @crtwide < 80 then
	execute "TERM 80"
end
heading Head1 : "'L'" : Head2
return

ScaleTests:
***********
loop
	print "Do you wish to run:"
	print " 0) exit"
	print " 1) quick check (no scaling)"
	print " 2) survey data ( 1 second /test)"
	print " 3) survey data (10 seconds/test)"
	print " 4) long data   (60 seconds/test)"
	print 
	print " Option ":
	input ScaleOption
	ScaleOption = trimf(ScaleOption)[1,1]
until num(ScaleOption) and len(ScaleOption) > 0 and (ScaleOption >=0 and ScaleOption <= 4)
repeat
if ScaleOption = 0 then goto AllDone
return

CountEachTest:
**************
loop
	print "How many iterations of each test? "
	print " 0) exit"
	print " 1) 1"
	print " 2) 10"
	print " 3) specify"
	print 
	print " Option ":
	input SetCountOption
	SetCountOption = trim(SetCountOption)
until num(SetCountOption) and len(SetCountOption) > 0 and (SetCountOption >=0 and SetCountOption <= 3)
repeat
if SetCountOption = 0 then goto AllDone
if SetCountOption = 1 then return
if SetCountOption = 2 then
	SetCountOption = 10
	return
end
loop
	print "How many iterations of each test (0 - 30)? ":
	input SetCountOption
	SetCountOption = trim(SetCountOption)
until num(SetCountOption) and len(SetCountOption) > 0 and (SetCountOption >= 0 and SetCountOption <= 30)
repeat
if SetCountOption = 0 then goto AllDone
return

SelectTests:
************
loop
	print "Do you wish to run:"
	print " 0) exit"
	print " 1) one test"
	print " 2) all tests"
	print " 3) from an active select list"
	print " 4) a category"
	print 
	print " Option ":
	input TestOption
	TestOption = trim(TestOption)
until num(TestOption) and len(TestOption) > 0 and (TestOption >=0 and TestOption <= 4)
repeat
if TestOption = 0 then goto AllDone
begin case
case TestOption = 1
	loop
		print "Test ID: (0 to exit) ":
		input TestNumber
	*until num(TestNumber) and len(TestNumber) > 0
	until len(TestNumber) > 0
	repeat
	if TestNumber = 0 then goto AllDone
	gosub FormatTestNumber
	Cmnd = 'SELECT Scaffold WITH @ID = "':TestNumber:'"'
	execute Cmnd capturing Output 
	NumRecords = 1
	* if @selected < 1 then
	if system(11) = 0 then
		print Output
		gosub SelectTests
	end
case TestOption = 2
	execute 'SSELECT Scaffold WITH TestRoutine # "R"'
	NumRecords = system(11)
case TestOption = 3
	* if @selected < 1 then
	if system(11) = 0 then
		print "No active select list"
		gosub SelectTests
	end
	NumRecords = system(11)
case TestOption = 4
	print "Category: (0 to exit) ":
	input Category
	if num(Category) and len(Category) > 0 and Category = 0 then goto AllDone
	clearselect
	execute 'SSELECT Scaffold WITH Category = "':Category:'"' capturing Output
	* if @selected < 1 then
	if system(11) = 0 then
		print Output
		gosub SelectTests
	end
	NumRecords = system(11)
case 1
	print "We should not be here"
	debug
	stop
end case
return




RunTests:
*********
TurnOffPagination = @(0,0)
loop
while readnext TestId
	* FirstTime = 1
	ScaffoldId = TestId
	gosub ReadScaffold
	if Failure then
		print Msg
		continue
	end
	ProfileId = TestId
	gosub ReaduProfile
	if Failure then
		print Msg
		continue
	end
	AllowedPlatforms = ScaffoldRecord<SCAFFOLD_PLATFORM>
	if len(AllowedPlatforms) then
		if index(AllowedPlatforms,Platform,1) = 0 then
			print "Skipping test ":ProfileId:" on this platform"
			continue
		end
	end
	TestOrRoutine = ScaffoldRecord<SCAFFOLD_TEST_ROUTINE>
	if len(TestOrRoutine) then
		if TestOrRoutine # "T" then
			print "Test ":ProfileId:" is not a test"
			continue
		end
	end
	ProfileRecord = ""
	gosub WriteProfile
	if Failure then
		print Msg
		continue
	end
	gosub PrepareTest
	for SetCountNdx = 1 to TestCounts
		gosub RunTest
		if ErrorState then ErrorState = 0; continue
		* if ErrorState then exit
		* if SetCountNdx # TestCounts then gosub PrintSpacerForResults
	Next SetCountNdx
repeat
return

PrepareTest:
************
ErrorState = 0
Iterations = ScaffoldRecord<SCAFFOLD_INITIAL_ITERATIONS> + 0; * Make numeric
TestCounts = ScaffoldRecord<SCAFFOLD_SAMPLES>
if len(TestCounts) and num(TestCounts) then
	TestCounts += 0; * Make numeric
end else
	TestCounts = SetCountOption
end
LineDescription  = TestId "R#4" : " "
LineDescription := ScaffoldRecord<SCAFFOLD_DESCRIPTION> "L#20"
LineDescription := ScaffoldRecord<SCAFFOLD_SUMMARY> "L#25"
print LineDescription :
FirstTime = 1
AtBeginningOfLine = 0
* PrintLineDescription = 1
TestComplete = 0
gosub GetTimeLimit
return

RunTest:
********
* TestComplete boolean gets set by failure condition
if TestComplete then return
*FirstTime = 1
loop
	gosub GetIterations
	* We run a separate environment for each test so that we avoid
	* potential issues of memory leaks, and buildups of loaded subroutines.
	Cmnd = OS.EXEC:UdtExecutable:" RUN TestUnderTest RunOne ":TestId:" ":Iterations:" ":SetCountNdx
	execute Cmnd
	gosub ReadProfile
	if Failure then
		gosub WriteErrorStatus
		return
	end
	if not(Found) then
		* Test failed? 
		Msg = "Test failed?  Profile record not found."
		gosub WriteErrorStatus
		return
	end
	DiffWall = ProfileRecord<PROFILE_WALL,SetCountNdx>; * seconds
	DiffCpu  = ProfileRecord<PROFILE_CPU,SetCountNdx>;  * microseconds
	TestIterations = ProfileRecord<PROFILE_ITERATIONS,SetCountNdx>
	If TestIterations < 1 then
		* No recorded iteration count.  Test must have failed.
		Failure = ProfileRecord<PROFILE_FAILURE,SetCountNdx>; * Failure code
		Msg     = ProfileRecord<PROFILE_MESSAGE,SetCountNdx>; * Failure message
		gosub WriteErrorStatus
		return
	end
	Results = Iterations "10R"
	Results := (DiffWall/1000) "R3#6"
	Results := (DiffCpu /1000) "R2#10"
	gosub IsTestComplete
until TestComplete
	if not(FirstTime) then
		* We do the first time using the SCAFFOLD_INITIAL_ITERATIONS
		* value to estimate the number of iterations to reach the
		* testing CPU limit.  We do not print the results of that
		* test.  If we are here, it is because the second time through,
		* that is, the one for the first real guess, fell short.
		* It is not the first time through, and still no success.
		gosub PrintResults
	end
	FirstTime = 0
repeat
TestComplete = 0
gosub PrintResults
return

PrintResults:
*************
if AtBeginningOfLine then
	gosub PrintSpacerForResults
end
print Results
AtBeginningOfLine = 1
return

PrintSpacerForResults:
**********************
print "    " : " " : " " "L#20" : " " "L#25" :
AtBeginningOfLine = 0
return

GetIterations:
**************
*debug
begin case
case FirstTime
	if SetCountNdx = 1 then
		* Make numeric
		Iterations = ScaffoldRecord<SCAFFOLD_INITIAL_ITERATIONS> + 0
		if len(Iterations) = 0 or (num(Iterations) and Iterations < 1) then
			Iterations = 1000
		end
	end else
		* We seem to have found about what we need.
		* Do nothing.
	end
case ScaleThisTest = 0
	print "We should not be here"
	debug
case DiffCpu = 0
	* Might be a SysV machine only reporting to the nearest second.
	* Scale it up to see if we can really get some CPU to measure.
	Iterations = Iterations * 100
case DiffCpu > TimeLimitCpu
	* Got enough CPU last iteration
case 1
	IterationsPrevious = Iterations
	Iterations = int(TimeLimitCpu * 1.05 * Iterations / DiffCpu)
	if IterationsPrevious >= Iterations then
		* We can get vagaries in reported CPU time
		* if we are not the only process on the machine.
		Iterations = int(IterationsPrevious * 1.1) + 1
	end
	if IterationsPrevious >= Iterations then
		* We can get vagaries in reported CPU time
		* So just scale it up some more
		Iterations = IterationsPrevious + 10
	end
end case
Iterations = int(Iterations+0.5)
return

IsTestComplete:
***************
if DiffCpu > TimeLimitCpu then
	TestComplete = 1
end
if TimeLimitWall > 1 and DiffWall > TimeLimitWall then
	Msg = "Test ":TestId:" ran too long."
	gosub WriteErrorStatus
end
return

GetTimeLimit:
*************
call MassageBooleanInput(Failure,Msg,ScaleThisTest,ScaffoldRecord<SCAFFOLD_SCALE_TEST>,1)
if Failure then
	gosub WriteErrorStatus
end
begin case
case ScaleThisTest = 0
	TimeLimitCpu  = 0
	TimeLimitWall = 0
case ScaleOption = 1
	TimeLimitCpu = 0
	TimeLimitWall = 0
case ScaleOption = 2
	TimeLimitCpu = 1000000; * 1 second in microseconds
	TimeLimitWall = 30000; * milliseconds
case ScaleOption = 3
	TimeLimitCpu = 10000000; * 10 seconds in microseconds
	TimeLimitWall = 100000; * milliseconds
case ScaleOption = 4
	TimeLimitCpu = 60000000; * 60 seconds in microseconds
	TimeLimitWall = 200000; * milliseconds
case 1
	TimeLimitCpu = 0
	TimeLimitWall = 0
end case
return

Initialize:
***********
TurnOffPagination = @(0,0)
AtBeginningOfLine = 1
return

DeterminePlatform:
******************
if system(33) = "Windows" then
	* Windows
	Platform = "W"
end else
	* UNIX
	Platform = "U"
end
return

WriteErrorStatus:
*****************
TestComplete = 1
ErrorState = 1
call DisplayMessage(Msg)
AtBeginningOfLine = 1
gosub ReaduProfile
if Failure then
	call DisplayMessage(Msg)
	release fProfile,ProfileId
	goto AllDone
end
ProfileRecord = ''
ProfileRecord<PROFILE_ITERATIONS> = -1
ProfileRecord<PROFILE_CPU>        = -1
ProfileRecord<PROFILE_WALL>       = -1
return

$include Include FormatTestNumber

$include IncludeFile Profile_Read
$include IncludeFile Profile_Readu
$include IncludeFile Profile_Write
$include IncludeFile Scaffold_Read

