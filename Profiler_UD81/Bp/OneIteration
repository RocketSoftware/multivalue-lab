*$options DEFAULT
subroutine OneIteration(Result,TestNumber)
******************************************************************************
*
*     Calculate the value of one iteration of a test in microseconds
*
*     Module %M%    Version  %I%   Date  %H%
*
*	IBM Confidential
*	OCO Source Materials
*	Copyright (C) IBM Corp.  2005
*
*     (c) Copyright 2005 IBM Corp. - All Rights Reserved
*     This is unpublished proprietary source code of IBM Corp.
*     The copyright notice above does not evidence any actual or intended
*     publication of such source code.
*
*******************************************************************************
*
*     Maintenence log - insert most recent change descriptions at top
*
*     Date.... ECase WHO Description........................................
*     02/02/05       MAB Created Module
*
*******************************************************************************

* Assume this is not called on Test 1, the empty FOR/NEXT

$include IncludeFile FailureEquates
$include IncludeFile Scaffold_Common
$include IncludeFile Scaffold_Open

$include IncludeFile Scaffold_Layout
$include IncludeFile Profile_Layout

$include Include TimeCalcCommon

gosub FormatTestNumber

read ProfileRecord from fAtFileName,TestNumber else
	print "Cannot READ ":AtFileName:",":TestNumber
	Result = ""
	return
end
ScaffoldId = TestNumber
gosub ReadScaffold
if Failure then
	call DisplayMessage(Msg)
	Result = ""
	return
end

* Possibly multivalued Iterations and TimeValues
Iterations = ProfileRecord<PROFILE_ITERATIONS>
TimeValues = ProfileRecord<PROFILE_CPU>
call CalculateMean(MeanTimeValue,TimeValues,Iterations,MeanIterations)
if len(MeanTimeValue) = 0 or len(MeanIterations) = 0 then
	Result = ""
	return
end

* Repetition count
* When we build tests, by default, we make 10 of the loop for each FOR/NEXT
RepetitionCount = ScaffoldRecord<SCAFFOLD_SECTION_2_DUP_FACTOR>
if len(RepetitionCount) then
	if ScaffoldRecord<SCAFFOLD_SECTION_2_DUP_FACTOR> < 1
	then RepetitionCount = 10
	else RepetitionCount += 0
end else
	* Default RepetitionCount
	RepetitionCount = 10
end

* Divide the result factor
* Some tests with statement labels cannot have a non-zero repetition count, but
*  are coded directly to have n tests within the loop.  This is that factor.
DivideBy = ScaffoldRecord<SCAFFOLD_DIVIDE_BY>
if len(DivideBy) then
	if DivideBy <= 1
	then DivideBy = 1
	else DivideBy += 0
end else
	DivideBy = 1
end

* Deduct amounts are for one iteration of the outside loop.
* The SCAFFOLD_DEDUCT_TEST_QUANTITY needs to be set so this calculation can
* ignore RepetitionCount and DivideBy
DeductTestIds = ScaffoldRecord<SCAFFOLD_DEDUCT_TEST>
DeductTestQuantities = ScaffoldRecord<SCAFFOLD_DEDUCT_TEST_QUANTITY>
DeductAmount = 0
if len(DeductTestIds) then
	loop
		DeductTestId = remove(DeductTestIds,DelimiterDeductTestIds)
		DeductTestQuantity = remove(DeductTestQuantities,DelimiterDeductTestQuantities)
		if len(DeductTestQuantity) = 0 then DeductTestQuantity = 1
		if DeductTestId = 1 then
			* requested baseline FOR/NEXT
			* Cannot call OneIteration on test ID 1, since it returns zero,
			DeductTestAmount = TimePerForNext
		end else
			call OneIteration(DeductTestAmount,DeductTestId)
		end
		if len(DeductTestAmount) then
			DeductAmount += (DeductTestAmount*DeductTestQuantity)
		end
	while DelimiterDeductTestIds
	repeat
end

*ForNextTime = TimePerForNext * MeanIterations
*Result = MeanTimeValue / RepetitionCount / DivideBy - TimePerForNext - DeductAmount
Result = (MeanTimeValue-TimePerForNext-DeductAmount) / RepetitionCount / DivideBy
return

$include Include FormatTestNumber

$include IncludeFile Scaffold_Read
