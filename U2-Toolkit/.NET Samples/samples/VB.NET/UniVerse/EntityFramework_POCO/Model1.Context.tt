<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension=".vb"#><#

Dim loader As New MetadataLoader(Me)
Dim region As New CodeRegion(Me)
Dim inputFile As String = "Customer.edmx"
Dim ItemCollection As EdmItemCollection = loader.CreateEdmItemCollection(inputFile)

Code = New CodeGenerationTools(Me)
EFTools = New MetadataTools(Me)
ObjectNamespace = Code.VsNamespaceSuggestion()
ModelNamespace = loader.GetModelNamespace(inputFile)

Dim container As EntityContainer = ItemCollection.GetItems(Of EntityContainer)().FirstOrDefault()
If container Is Nothing Then
    Return String.Empty
End If
#>
'------------------------------------------------------------------------------
' <auto-generated>
' <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
'
' <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
' <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
<#
If container.FunctionImports.Any()
#>
Imports System.Data.Objects
<#
End If
#>

<#
If Not String.IsNullOrEmpty(ObjectNamespace) Then
#>
Namespace <#=Code.EscapeNamespace(ObjectNamespace)#>

<#
    PushIndent(CodeRegion.GetIndent(1))
End If

#>
Partial <#=Accessibility.ForType(container)#> Class <#=Code.Escape(container)#>
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=<#=container.Name#>")
<#
    WriteLazyLoadingEnabled(container)
#>
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
	    Throw New UnintentionalCodeFirstException()
    End Sub

<#
    For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
#>
    <#=Accessibility.ForReadOnlyProperty(entitySet)#> Property <#=Code.Escape(entitySet)#>() As DbSet(Of <#=Code.Escape(entitySet.ElementType)#>)
<#
    Next

    For Each edmFunction As EdmFunction In container.FunctionImports
        WriteFunctionImport(edmFunction, False)
    Next
#>

End Class
<#

If Not String.IsNullOrEmpty(ObjectNamespace) Then
    PopIndent()
#>

End Namespace
<#
End If

#>
<#+
Property ModelNamespace As String
Property ObjectNamespace As String
Property Code As CodeGenerationTools
Property EFTools As MetadataTools
	
Private Function GetResourceString(resourceName As String) As String
	If(_resourceManager Is Nothing)
        _resourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
    End If
	
    Return _resourceManager.GetString(resourceName, Nothing)
End Function
Dim _resourceManager As System.Resources.ResourceManager

Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
    Dim lazyLoadingAttributeValue As String = Nothing
    Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
    If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
        Dim isLazyLoading As Boolean
        If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) AndAlso Not isLazyLoading Then
#>
        MyBase.Configuration.LazyLoadingEnabled = False
<#+
        End If
    End If
End Sub

Sub WriteFunctionImport(edmFunction As EdmFunction, includeMergeOption As Boolean)
	Dim parameters As List(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, Code, EFTools)
	Dim paramList As String = [String].Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
	Dim returnType As TypeUsage = If(edmFunction.ReturnParameter Is Nothing, Nothing, EFTools.GetElementType(edmFunction.ReturnParameter.TypeUsage))
	Dim processedReturn As String = If(returnType Is Nothing, "Integer", "ObjectResult(Of " & MultiSchemaEscape(returnType) & ")")

	If includeMergeOption Then
		paramList = Code.StringAfter(paramList, ", ") & "mergeOption As MergeOption"
	End If
#>

    <#=AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction))#> Function <#=Code.Escape(edmFunction)#>(<#=paramList#>) As <#=processedReturn#> 
<#+
	If returnType IsNot Nothing AndAlso (returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType OrElse _
                                         returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.ComplexType) Then
#>
        DirectCast(Me, IObjectContextAdapter).ObjectContext.MetadataWorkspace.LoadFromAssembly(GetType(<#=MultiSchemaEscape(returnType)#>).Assembly)

<#+
	End If

	For Each parameter As FunctionImportParameter In parameters.Where(Function(p) p.NeedsLocalVariable)
		Dim isNotNull = If(parameter.IsNullableOfT, parameter.FunctionParameterName & ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")
		Dim notNullInit = "New ObjectParameter(""" & parameter.EsqlParameterName & """, " & parameter.FunctionParameterName & ")"
		Dim nullInit = "New ObjectParameter(""" & parameter.EsqlParameterName & """, GetType(" & parameter.RawClrTypeName & "))"
#>
        Dim <#=parameter.LocalVariableName#> As ObjectParameter = If(<#=isNotNull#>, <#=notNullInit#>, <#=nullInit#>)

<#+
	Next

	Dim genericArg = If(returnType Is Nothing, "", "(Of " & MultiSchemaEscape(returnType) & ")")
	Dim callParams = Code.StringBefore(", ", [String].Join(", ", parameters.[Select](Function(p) p.ExecuteParameterName).ToArray()))

	If includeMergeOption Then
		callParams = ", mergeOption" & callParams
	End If
#>
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction<#=genericArg#>("<#=edmFunction.Name#>"<#=callParams#>)
    End Function
<#+
	If Not includeMergeOption AndAlso returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
		WriteFunctionImport(edmFunction, True)
	End If
End Sub

Function AccessibilityAndVirtual(accessibility As String) As String
	Return accessibility & (If(accessibility <> "Private", " Overridable", ""))
End Function

Function MultiSchemaEscape(usage As TypeUsage) As String
	Dim type = TryCast(usage.EdmType, StructuralType)
	Return If(type IsNot Nothing AndAlso type.NamespaceName <> ModelNamespace, Code.CreateFullName(Code.EscapeNamespace(type.NamespaceName), Code.Escape(type)), Code.Escape(usage))
End Function

#>