<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension=".vb"#><#

Dim code As New CodeGenerationTools(Me)
Dim loader As New MetadataLoader(Me)
Dim region As New CodeRegion(Me, 1)
Dim ef As New MetadataTools(Me)

Dim inputFile As String = "Student.edmx"
Dim ItemCollection As EdmItemCollection = loader.CreateEdmItemCollection(inputFile)
Dim namespaceName As String = code.VsNamespaceSuggestion()

Dim fileManager As EntityFrameworkTemplateFileManager = EntityFrameworkTemplateFileManager.Create(Me)
WriteHeader(fileManager)

For Each loopEntity As EntityType In ItemCollection.GetItems(Of EntityType)().OrderBy(Function(e) e.Name)
    Dim entity as EntityType = loopEntity
    fileManager.StartNewFile(entity.Name & ".vb")
#>
Imports System
Imports System.Collections.Generic

<#
    BeginNamespace(namespaceName, code)
#>
Partial <#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.MustInheritOption(entity))#>Class <#=code.Escape(entity)#><#=code.StringBefore(Environment.NewLine & CodeRegion.GetIndent(region.CurrentIndentLevel + 2) & " Inherits ", code.Escape(entity.BaseType))#>
<#
    Dim primitiveProperties as IEnumerable(Of EdmProperty) = entity.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is PrimitiveType AndAlso p.DeclaringType Is entity)
    If primitiveProperties.Any() Then
        For Each edmProperty As EdmProperty In primitiveProperties
            WriteProperty(code, edmProperty)
        Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = entity.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType Is entity)
    If complexProperties.Any() Then
#>

<#
       For Each complexProperty As EdmProperty In complexProperties
            WriteComplexProperty(code, complexProperty)
       Next
    End If

    Dim navigationProperties as IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(np) np.DeclaringType Is entity)
    If navigationProperties.Any() Then
#>

<#
        For Each navigationProperty As NavigationProperty In navigationProperties
            WriteNavigationProperty(code, navigationProperty)
        Next
    End If

#>

End Class
<#
    EndNamespace(namespaceName)
Next

For Each loopComplex As ComplexType In ItemCollection.GetItems(Of ComplexType)().OrderBy(Function(e) e.Name)
    Dim complex as ComplexType = loopComplex
    fileManager.StartNewFile(complex.Name & ".vb")
#>
Imports System

<#
    BeginNamespace(namespaceName, code)
#>
Partial <#=Accessibility.ForType(complex)#> Class <#=code.Escape(complex)#>
<#

    Dim primitiveProperties as IEnumerable(Of EdmProperty) = complex.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is PrimitiveType AndAlso p.DeclaringType Is complex)
    If primitiveProperties.Any() Then
        For Each edmProperty As EdmProperty In primitiveProperties
            WriteProperty(code, edmProperty)
        Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = complex.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType Is complex)
    If complexProperties.Any() Then
#>

<#
        For Each complexProperty As EdmProperty In complexProperties
            WriteComplexProperty(code, complexProperty)
        Next
    End If

#>

End Class
<#
    EndNamespace(namespaceName)
Next

If Not VerifyTypesAreCaseInsensitiveUnique(ItemCollection) Then
    Return ""
End If

fileManager.Process()
#>
<#+
Private Function GetResourceString(resourceName As String) As String
	If(_resourceManager Is Nothing)
        _resourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
    End If
	
    Return _resourceManager.GetString(resourceName, Nothing)
End Function
Dim _resourceManager As System.Resources.ResourceManager

Private Sub WriteHeader(ByVal fileManager As EntityFrameworkTemplateFileManager)
    fileManager.StartHeader()
#>
'------------------------------------------------------------------------------
' <auto-generated>
' <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
'
' <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
' <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
' </auto-generated>
'------------------------------------------------------------------------------

<#+
    FileManager.EndBlock()
End Sub

Private Sub BeginNamespace(ByVal namespaceName As String, ByVal code As CodeGenerationTools)
    Dim region As CodeRegion = New CodeRegion(Me)
    If Not String.IsNullOrEmpty(namespaceName) Then
#>
Namespace <#=code.EscapeNamespace(namespaceName)#>

<#+
        PushIndent(CodeRegion.GetIndent(1))
    End If
End Sub

Private Sub EndNamespace(namespaceName As String)
    If Not String.IsNullOrEmpty(namespaceName) Then
        PopIndent()
#>

End Namespace
<#+
    End If
End Sub

Private Sub WriteProperty(code As CodeGenerationTools, edmProperty As EdmProperty)
    WriteProperty(code, edmProperty, code.StringBefore(" = ", code.CreateLiteral(edmProperty.DefaultValue)))
End Sub

Private Sub WriteComplexProperty(code As CodeGenerationTools, complexProperty As EdmProperty)
    WriteProperty(code, complexProperty, " = New " & code.Escape(complexProperty.TypeUsage))
End Sub

Private Sub WriteProperty(code As CodeGenerationTools, edmProperty As EdmProperty, defaultValue As String)
    WriteProperty(Accessibility.ForProperty(edmProperty), _
                  code.Escape(edmProperty.TypeUsage), _
                  code.Escape(edmProperty), _
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)), _
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)), _
                  defaultValue)
End Sub

Private Sub WriteNavigationProperty(code As CodeGenerationTools, navigationProperty As NavigationProperty)
    Dim endType = code.Escape(navigationProperty.ToEndMember.GetEntityType())
    Dim defaultValue = ""
    Dim propertyType = code.Escape(endType)
    
    If(navigationProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many)
        defaultValue = " = New HashSet(Of " & propertyType & ")"
        propertyType = "ICollection(Of " & propertyType & ")"
    End If

    WriteProperty(PropertyAccessibilityAndVirtual(navigationProperty), _
                  propertyType, _
                  code.Escape(navigationProperty), _
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)), _
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)), _
                  defaultValue)
End Sub

Private Sub WriteProperty(accessibility As String, type As String, name As String, getterAccessibility As String, setterAccessibility As String, defaultValue As String)
   If ([String].IsNullOrEmpty(getterAccessibility) AndAlso [String].IsNullOrEmpty(setterAccessibility))
#>
    <#=accessibility#> Property <#=name#> As <#=type#><#=defaultValue#>
<#+
    Else
#>

    Private _<#=name#> As <#=type#><#=defaultValue#>
    <#=accessibility#> Property <#=name#> As <#=type#>
        <#=getterAccessibility#>Get
            Return _<#=name#>
        End Get
        <#=setterAccessibility#>Set(ByVal value As <#=type#>)
            _<#=name#> = value
        End Set
    End Property
<#+
    End If
End Sub

Private Function PropertyAccessibilityAndVirtual(ByVal member As EdmMember) As String
    Dim propertyAccess As String = Accessibility.ForProperty(member)
    Dim setAccess as String = Accessibility.ForSetter(member)
    Dim getAccess as String = Accessibility.ForGetter(member)
    If propertyAccess <> "Private" AndAlso setAccess <> "Private" AndAlso getAccess <> "Private" Then
        Return propertyAccess & " Overridable"
    End If

    Return propertyAccess
End Function

Private Function VerifyTypesAreCaseInsensitiveUnique(ByVal itemCollection As EdmItemCollection) As Boolean
    Dim alreadySeen As New Dictionary(Of String, Boolean)(StringComparer.OrdinalIgnoreCase)

    For Each type As StructuralType In itemCollection.GetItems(Of StructuralType)()
        If Not (TypeOf type Is EntityType OrElse TypeOf type Is ComplexType) Then
            Continue For
        End If

        If alreadySeen.ContainsKey(type.FullName) Then
            [Error](String.Format("This template does not support types that differ only by case, the types {0} are not supported", type.FullName))
            Return False
        Else
            alreadySeen.Add(type.FullName, True)
        End If
    Next

    Return True
End Function
#>
