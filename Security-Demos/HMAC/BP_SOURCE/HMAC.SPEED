***
*** HMAC (Hash-based Message Authentication Code)
*** based on RFC-2104
***
*** Sample code in UniVerse BASIC
*** 	Supports HMAC-MD5, HMAC-SHA1 and HMAC-SHA256
***	NOTE: SHA256 is available only in UV 11.2 and UD 7.4.
***	NOTE: If run on pre-11.2/7.4, local functions must be put into separate files.
***
*** More technical comments are in FUNCTION HMAC() code segment below.
***

DEFFUN HMAC(ALG, KEY, MESSAGE)
DEFFUN HMAC_DAN(ALG, KEY, MESSAGE)

* Performing test against vectors in RFC-2104
* The testing keys/messages and "expecting" strings are directly from RFC-2104

* control number of iterations
count = 10000

ERRNO = 0
TESTS = 0

* turn off paging in case you did not run with -NO.PAGE"
EXECUTE "TERM ,200"

CRT
CRT "Verifying result using RFC-2104 test vectors..."
CRT
CRT "Testing empty key/message..."
KEY = ''
MSG = ''
ALG = "MD5"
EXPECTING = "74e6f7298a9c2d168935f58c001bad88"
GOSUB RUN.JC
GOSUB RUN.DAN

ALG = "SHA1"
EXPECTING = "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d"
GOSUB RUN.JC
GOSUB RUN.DAN

ALG = "SHA256"
EXPECTING = "b613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad"
GOSUB RUN.JC
GOSUB RUN.DAN

CRT
KEY = "key"
MSG = "The quick brown fox jumps over the lazy dog"
CRT "Testing key=":KEY:", message=":MSG

ALG = "MD5"
EXPECTING = "80070713463e7749b90c2dc24911e275"
GOSUB RUN.JC
GOSUB RUN.DAN

ALG = "SHA1"
EXPECTING = "de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9"
GOSUB RUN.JC
GOSUB RUN.DAN

ALG = "SHA256"
EXPECTING = "f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8"
GOSUB RUN.JC
GOSUB RUN.DAN

CRT
CRT "Testing a very long key..."
MSG = "The quick brown fox jumps over the lazy dog"
KEY = STR('*', 765)
ALG = "SHA1"
EXPECTING = "4f64e6ec5c830983f4c9db6abd2b78ea1e30ae47"
CRT ALG
GOSUB RUN.JC
GOSUB RUN.DAN

CRT
CRT "Cases tested: ":TESTS
CRT "Passed:       ":TESTS-ERRNO
CRT "Failed:       ":ERRNO 

EXECUTE "TERM ,24"
STOP

CHECKING:
HEXMAC = OCONV(OCONV(MYHMAC, "MX0C"), "MCL")
CRT
CRT "Algorithm: HMAC-":ALG
CRT "Expecting: ":EXPECTING
CRT "  U2 HMAC: ":HEXMAC
IF EXPECTING <> HEXMAC THEN
	ERRNO += 1
END
TESTS += 1
RETURN 

RUN.JC:
start_c = SYSTEM(9)
start_e = SYSTEM(12)
FOR I=1 TO count
MYHMAC = HMAC(ALG, KEY, MSG)
NEXT I
GOSUB CHECKING
PRINT "Jing's: ":SYSTEM(9)-start_c, SYSTEM(12)-start_e
RETURN

RUN.DAN:
start_c = SYSTEM(9)
start_e = SYSTEM(12)
FOR I=1 TO count
MYHMAC = HMAC_DAN(ALG, KEY, MSG)
NEXT I
GOSUB CHECKING
PRINT "Dan's:  ":SYSTEM(9)-start_c, SYSTEM(12)-start_e
RETURN

***
*** For UniData 7.3.x or UniVerse 11.1.x and all previous versions:
*** The following function must be put into a separate file, compiled and cataloged
*** Or, you can adapt it to be called inline by GOSUB.
***
*** RFC-2104 HMAC algorithm is
***    HMAC(K,m) = H((K XOR opad) || H((K XOR ipad) || m)) 
*** where
***	K is a secret key
***	m is the message to be authenticated
***	H is a hash algorithm such as md5, sha1, sha256 etc.
***	XOR bitwise exclusive-OR operation
***	|| concatenation operation
***	opad is outer padding string 0x5c5c...
***	ipad is inner padding string 0x3636...
***
*** Two different ways of doing XOR are implemented by the HMAC() function below.
*** The first (by $UNDEFINE USE_BITXOR) is to convert all pads/keys to literal binary strings
*** then perform XOR "bit by bit". The second (by $DEFINE USE_BITXOR) is to convert all
*** pads/key into literal hex strings, then convert 8 hex chars into one integer and 
*** perform 32-bit integer XOR by calling BITXOR(), finally convert each partial result
*** back into literal hex strings. The second approach appeasrs more convoluted but much
*** more efficient. 
***
*** A more elegant implementation shown below (HMAC_DAN) was written by Dan McGrath.
*** Benchmark shows that it is a little slower than HMAC() with BITXOR.
***
*** There should be other ways to implement HMAC(). implementations shown here are just
*** for examples.
***
***
FUNCTION HMAC(ALG, KEY, MESSAGE)
EQU BLKSZ TO	64	; * HMAC-MD5/SHA1/SHA256 block size is 512 bits(64 bytes)
EQU OCHAR TO	92	; * hex 0x5c
EQU ICHAR TO	54	; * hex 0x36

HMAC = ""

* normalize key if it is too long
KEYLEN = LEN(KEY)
IF KEYLEN > BLKSZ THEN
	STATUS = DIGEST(ALG, KEY, 1, KEY) 
	KEYLEN = LEN(KEY)
END

* otherwise padding the key with 0s
IF KEYLEN < BLKSZ THEN
	KEY = KEY : STR(CHAR(0), BLKSZ-KEYLEN)
	KEYLEN = BLKSZ 
END

* do XOR: this is just one example way
$DEFINE USE_BITXOR
$IFDEF USE_BITXOR	
* use BITXOR, little counter-intuitive but more efficient, any other better ways?

* initialize ipad="3636...", opad="5c5c..." - explicit hex format
OHEX = ""
IHEX = ""
IPAD = STR(CHAR(ICHAR), BLKSZ)
OPAD = STR(CHAR(OCHAR), BLKSZ)

FOR I = 1 TO BLKSZ STEP 4
	* convert 4 bytes to a 32-bit integer
	KNUM = ICONV(OCONV(KEY[I,4], "MX0C"), "MX") 
	* do XOR and convert result to literal hex string (8 bytes)
	ITMP = OCONV(BITXOR(ICONV(OCONV(IPAD[I,4], "MX0C"), "MX"), KNUM), "MX")
	OTMP = OCONV(BITXOR(ICONV(OCONV(OPAD[I,4], "MX0C"), "MX"), KNUM), "MX")

	* make sure each resultant integer is converted into exact 8 hex chars
	IF LEN(ITMP) < 8 THEN
		ITMP = STR('0', 8-LEN(ITMP)):ITMP
	END
	IF LEN(OTMP) < 8 THEN
		OTMP = STR('0', 8-LEN(OTMP)):OTMP
	END

	IHEX := ITMP
	OHEX := OTMP
NEXT I

* convert temp pads back to internal hex string representation
OPAD = ICONV(OHEX, "MX0C")
IPAD = ICONV(IHEX, "MX0C")

$ELSE

* use our own binary XOR, seem simple but very inefficient 

* initialize ipad="0x3636...", opad="0x5c5c..."
IPAD = STR(CHAR(ICHAR), BLKSZ)
OPAD = STR(CHAR(OCHAR), BLKSZ)

* prepare for XOR
BIN_IPAD = OCONV(IPAD, "MB0C")
BIN_OPAD = OCONV(OPAD, "MB0C")
BIN_KEY = OCONV(KEY, "MB0C")

FOR I = 1 TO LEN(BIN_KEY)
	IF BIN_IPAD[I,1] = BIN_KEY[I,1] THEN
		BIN_IPAD[I,1] = 0
	END ELSE
		BIN_IPAD[I,1] = 1
	END
	IF BIN_OPAD[I,1] = BIN_KEY[I,1] THEN
		BIN_OPAD[I,1] = 0
	END ELSE
		BIN_OPAD[I,1] = 1
	END
NEXT I

* convert back to string pads
IPAD = ICONV(BIN_IPAD, "MB0C")
OPAD = ICONV(BIN_OPAD, "MB0C")

$ENDIF

* do inner digest
STATUS = DIGEST(ALG, IPAD:MESSAGE, 1, HMAC)
* do outer digest
STATUS = DIGEST(ALG, OPAD:HMAC, 1, HMAC)

RETURN (HMAC)

FUNCTION HMAC_DAN(algorithm, key, message)
*
* Author: Dan McGrath
* Purpose: SHA1(and MD5/SHA256) HMAC for message authentication
*
* Usage: CALL HMAC_DAN(algorithm, message, key)
*        * result = 20 byte HMAC string (16 for md5, 32 for sha256).
*        * message = message to create HMAC for.
*        * key = shared secret used to create HMAC with.
*

   EQU blocksize TO 64
   EQU pad TO STR(CHAR(0), blocksize)
   EQU trans_5C TO STR(CHAR(92), blocksize)
   EQU trans_36 TO STR(CHAR(54), blocksize)

   IF LEN(key) > blocksize THEN
      ret = DIGEST(algorithm, key, 1, result)
      key = result
      result = ''
   END

   key = (key : pad)[1,blocksize]
   
   leftXOR = key
   rightXOR = trans_5C
   GOSUB STRING.XOR
   outerKey = resultXOR
   
   rightXOR = trans_36
   GOSUB STRING.XOR
   innerKey = resultXOR

   ret = DIGEST(algorithm, innerKey : message, 1, innerResult)
   ret = DIGEST(algorithm, outerKey : innerResult, 1, result)

   RETURN (result)

STRING.XOR:

   resultXOR = ''

   FOR charPos = 1 TO LEN(leftXOR)
      resultXOR := CHAR(BITXOR(SEQ(leftXOR[charPos, 1]), SEQ(rightXOR[charPos, 1])))
   NEXT charPos

RETURN
END
