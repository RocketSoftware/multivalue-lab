SUBROUTINE redis.generic (response, request)

* Subroutine to generically send Redis commands and receive responses
* Uses UDO to pass information around

$INCLUDE INCLUDE redis.internal
$INCLUDE INCLUDE UDO.H

   ret = UDOCreate(UDO_OBJECT, response)

   IF NOT(redis$connected) THEN
      ret = UDOSetProperty(response, 'status', -9)
      RETURN
   END

   IF UDOIsTypeOf(request, UDO_STRING) THEN
      GOSUB RequestFromString
   END ELSE
      * More complex requests sent via UDO arrays or objects not supported yet
      RETURN
   END

* Send request to Redis
   result = writeSocket(redis$socket, message, redis$timeout, BLOCKING$MODE, bytes)
*TODO: compare bytes with LEN(message)
   result = NOT(result)

* Read back response from Redis
   IF result THEN
      result = readSocket(redis$socket, message.type, 1, redis$timeout, BLOCKING$MODE, bytes)
      IF result # 0 OR bytes = -1 THEN
         ret = UDOSetProperty(response, 'errcode', result)
         ret = UDOSetProperty(response, 'status', -8)
         result = 0
         RETURN
      END
      
      result = readSocket(redis$socket, message, 0, redis$timeout, BLOCKING$MODE, bytes)
      *TODO: Need to actually check this later
      
      BEGIN CASE
         CASE message.type = ":" ;* Integer message
            ret = UDOSetProperty(response, 'status', redis$INTEGER_MESSAGE)
            ret = UDOSetProperty(response, 'message', FIELD(message, CHAR(13), 1))
            retMsg = message
         CASE message.type = "+" ;* Status message
            ret = UDOSetProperty(response, 'status', redis$STATUS_MESSAGE)
            ret = UDOSetProperty(response, 'message', FIELD(message, CHAR(13), 1))
         CASE message.type = "-" ;* Error message
            ret = UDOSetProperty(response, 'status', redis$ERROR_MESSAGE)
            ret = UDOSetProperty(response, 'message', FIELD(message, CHAR(13), 1))
         CASE message.type = "$" ;* Bulk reply
            ret = UDOSetProperty(response, 'status', redis$BULK_REPLY)
            valueSize = FIELD(message, CHAR(13), 1)
            IF valueSize = -1 THEN
               ret = UDOSetProperty(response, 'message', "(nil)")
            END ELSE
               * Keep reading until we get all data in case data > packet size
               LOOP
               WHILE LEN(valueSize) + LEN(valueSize)+valueSize+8 > LEN(message)
                  result = readSocket(redis$socket, messageNext, 0, redis$timeout, BLOCKING$MODE, bytes)
                  message := messageNext
               REPEAT
               ret = UDOSetProperty(response, 'message', message[LEN(valueSize)+3, LEN(valueSize)+valueSize+2]) 
            END
         CASE message.type = "*" ;* Multi-Bulk reply
            ret = UDOSetProperty(response, 'status', redis$MULTI_BULK_REPLY)
            elements = FIELD(message, CHAR(13), 1)
            message = message[COL2()+2, LEN(message)]
            ret = UDOCreate(UDO_ARRAY, bulkReplies)
            ret = UDOCreate(UDO_ARRAY, bulkTypes)
            GOSUB parse.all ;* Parse each bulk-reply into UDO Array items
            ret = UDOSetProperty(response, 'message', bulkReplies)
            ret = UDOSetProperty(response, 'messageTypes', bulkTypes)
         CASE 1
            ret = UDOSetProperty(response, 'status', -1)
      END CASE
   END

RETURN

* Parse a multi-bulk response from Redis into a UDO Array
parse.all:
   FOR enum = 1 TO elements
      message.type = message[1,1]
      message = message[2,LEN(message)]
   
      LOOP
         check = INDEX(message,CHAR(13), 1)
         IF check THEN
            IF message[check+1,1] # CHAR(10) THEN CHECK = 0
         END
      WHILE NOT(check)
         result = readSocket(redis$socket, messageNext, 0, redis$timeout, BLOCKING$MODE, bytes)
         message := messageNext
      REPEAT
      
      BEGIN CASE
         CASE message.type = ":" ;* Integer message
            messageItem = FIELD(message, CHAR(13), 1)
            ret = UDOArrayAppendItem(bulkReplies, messageItem)
            ret = UDOArrayAppendItem(bulkTypes, 'int')
            message = message[COL2()+2, LEN(message)]
         CASE message.type = "+" ;* Status message
            messageItem = FIELD(message, CHAR(13), 1)
            ret = UDOArrayAppendItem(bulkReplies, messageItem)
            ret = UDOArrayAppendItem(bulkTypes, 'stat')
            message = message[COL2()+2, LEN(message)]
         CASE message.type = "-" ;* Error message
            messageItem = FIELD(message, CHAR(13), 1)
            ret = UDOArrayAppendItem(bulkReplies, messageItem)
            ret = UDOArrayAppendItem(bulkTypes, 'err')
            message = message[COL2()+2, LEN(message)]
         CASE message.type = "$" ;* Bulk reply
            valueSize = FIELD(message, CHAR(13), 1)
            IF valueSize = -1 THEN
               ret = UDOArrayAppendItem(bulkReplies, "(nil)")
               message = message[COL2()+1, LEN(message)]
            END ELSE
               * Keep reading until we get all data in case data > packet size
               LOOP
               WHILE LEN(valueSize)+4+valueSize > LEN(message)
                  result = readSocket(redis$socket, messageNext, 0, redis$timeout, BLOCKING$MODE, bytes)
                  message := messageNext
               REPEAT
               ret = UDOArrayAppendItem(bulkReplies, message[LEN(valueSize)+3, valueSize])
               message = message[LEN(valueSize)+valueSize+5, LEN(message)]
            END
            ret = UDOArrayAppendItem(bulkTypes, 'bulk')
      END CASE
   NEXT enum
RETURN

RequestFromString:

   CONVERT ' ' TO @AM IN request

   ARGS = DCOUNT(request, @AM)
   
   message = '*':ARGS:redis$msg$separator
   FOR I = 1 TO ARGS
      ARG = request<I>
      message := '$':LEN(ARG):redis$msg$separator
      message := ARG:redis$msg$separator
   NEXT I

RETURN

