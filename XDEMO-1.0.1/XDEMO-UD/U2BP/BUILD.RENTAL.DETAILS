*******************************************************************************
*
*       Program BUILD.RENTAL.DETAILS
*       Copyright Rocket Software, Rocket U2 (C) 2010
*
*
*******************************************************************************
*
*  Author: Mike Rajkowski
*  Created on :Sep 28, 2010 4:38:10 PM
*  Description: Builds RENTAL.DETAILS file
*
*****************************************************************************
OPEN "MEMBERS" TO MEMBERS ELSE STOP "Can not open MEMBERS"
OPEN "PRODUCTS" TO PRODUCTS ELSE STOP "Can not open PRODUCTS"
OPEN "LOCATIONS" TO LOCATIONS ELSE STOP "Can not open LOCATIONS"
OPEN "RENTAL.DETAILS" TO RENTAL_DETAILS ELSE STOP "Can not open RENTAL.DETAILS"
*
* Ask to continue first
ANS = "";MEMO = ""
CRT "This program will clear the RENTAL.DETAILS file."
 LOOP
  MEMO = "Do you want to continue(Y/<N>)"
  DEFAULT.ANS = "N";VALID.OPTIONS = "NY";GOSUB GET.ANS  
 UNTIL UPCASE(ANS) = "Y" OR UPCASE(ANS) = "N"   
 REPEAT
 IF UPCASE(ANS) = "N" THEN
   CRT "Aborting execution of BUILD.RENTAL.DETAILS."
   STOP
 END

** Build list of MEMBERS
SELECT MEMBERS
DONE = 0; MYID = ""; MEMBER_LIST = "" ; MEMBER_COUNT = 0
LOOP
READNEXT MYID ELSE DONE = 1
UNTIL DONE
MEMBER_LIST<-1> = MYID
MEMBER_COUNT += 1
REPEAT
** Build list of PRODUCTS
SELECT PRODUCTS
DONE = 0; MYID = ""; PRODUCT_LIST = ""; PRODUCT_COUNT = 0 
LOOP
READNEXT MYID ELSE DONE = 1
UNTIL DONE
PRODUCT_LIST<-1> = MYID
PRODUCT_COUNT += 1
REPEAT
** Build list of LOCATIONS
SELECT LOCATIONS
DONE = 0; MYID = ""; LOCATION_LIST = ""; LOCATION_COUNT = 0 
LOOP
READNEXT MYID ELSE DONE = 1
UNTIL DONE
LOCATION_LIST<-1> = MYID
LOCATION_COUNT += 1
REPEAT

PRINT "Working with:"
PRINT MEMBER_COUNT:" Members"
PRINT PRODUCT_COUNT:" Products"
PRINT LOCATION_COUNT:" Locations"

MY.CLEAR.FILE = "RENTAL.DETAILS"
OPEN "","VOC" TO F.VOC  ELSE STOP "Open VOC Error." 
 IF MY.CLEAR.FILE # "" THEN
   READ MY.REC FROM F.VOC,MY.CLEAR.FILE ELSE MY.REC = ""
   IF MY.REC # "" THEN
     CMD = "CLEAR.FILE ":MY.CLEAR.FILE;EXECUTE CMD CAPTURING NULL
   END
 END     

SEQ = 0

* Equating fields
EQU FLD.CUST.CODE TO 1;*CUSTOMER.CODE
EQU FLD.PROD.CODES TO 2;*PRODUCT.CODES
EQU FLD.ITEM.NO TO 3;*ITEM_NO
EQU FLD.FROM.DATE TO 4;*FROM.DATE
EQU FLD.FROM.LOC TO 5;*FROM.LOCATION
EQU FLD.DUE.DATE TO 6;*DUE.DATE
EQU FLD.ACT.RET.DATE TO 7;*ACTUAL.RETURN.DATE
EQU FLD.RETURN.LOC TO 8;*RETURN.LOCATION
EQU FLD.COST TO 9;*COST
EQU FLD.ACT.COST TO 10;*ACTUAL.COST
EQU FLD.RENTAL.TIME TO 11;*RENTAL_TIME
EQU FLD.AMENDED.BY TO 12;* AMENDED.BY
EQU FLD.AMENDED.DATE TO 13;* AMENDED.DATE

* CREATE A YEARS WORTH OF DATE
TODAY = @DATE
FOR EACH_DAY = TODAY - 365 TO TODAY
   FOR EACH_LOCATION = 1 TO LOCATION_COUNT
       LOCATION_ID = LOCATION_LIST<EACH_LOCATION>
       REC = "";ITEM.NO = 0
       DETAIL_ITEMS = RND(5)
       FOR EACH_DETAIL_ITEM = 1 TO DETAIL_ITEMS
         PRODUCTS_RENTED = RND(3) + 1
         REC<FLD.CUST.CODE> = MEMBER_LIST< RND(MEMBER_COUNT) + 1 >
         FOR EACH_ITEM = 1 TO PRODUCTS_RENTED
            ITEM.NO = ITEM.NO + 1         
            REC<FLD.PROD.CODES, -1> = PRODUCT_LIST< RND(PRODUCT_COUNT) + 1 >
            REC<FLD.FROM.LOC, -1> = LOCATION_ID
            MY.FROM.DATE = EACH_DAY
            REC<FLD.FROM.DATE, -1> = MY.FROM.DATE            
            DAYS.RENTED = RND(7) + 1
            MY.RET.DATE = EACH_DAY + DAYS.RENTED
            REC<FLD.ACT.RET.DATE, -1> = MY.RET.DATE
            REC<FLD.DUE.DATE, -1> = EACH_DAY + 7
            REC<FLD.RETURN.LOC, -1> = EACH_LOCATION
            RENTAL.COST = RND(200)
            REC<FLD.COST, -1> = RENTAL.COST
            REC<FLD.ACT.COST, -1> = RENTAL.COST * DAYS.RENTED
            REC<FLD.RENTAL.TIME, -1> = RND(86400) + 1
            REC<FLD.ITEM.NO, -1> = ITEM.NO
         NEXT EACH_ITEM   
         REC<FLD.AMENDED.BY> = "MIKE"
         REC<FLD.AMENDED.DATE> = EACH_DAY
         SEQ += 1
         WRITE REC ON RENTAL_DETAILS, SEQ
       NEXT EACH_DETAIL_ITEM
   NEXT EACH_LOCATION
NEXT EACH_DAY       

STOP

GET.ANS: 
CORRECT.ANS = ""
LOOP
  ANS = ""
  CRT MEMO:;INPUT ANS
  ANS = UPCASE(ANS)
  IF ANS = "" THEN ANS = UPCASE(DEFAULT.ANS)
  IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP ;* Always allow to quit
  VALID.ANS = 0
  FOR V = 1 TO LEN(VALID.OPTIONS)
    IF UPCASE(ANS) = UPCASE(ANS[V,1]) THEN 
       VALID.ANS = 1
       CORRECT.ANS = UPCASE(ANS)
    END
  NEXT V
UNTIL VALID.ANS
REPEAT
IF CORRECT.ANS # "" THEN ANS = CORRECT.ANS
DEFAULT.ANS = "";MEMO = ""
RETURN
