*******************************************************************************
*
*       Program BUILD.XDEMO.FILES
*       Copyright Rocket Software, Rocket U2 (C) 2010
*
*******************************************************************************
*
*  Author: Brian Kupzyk (bkupzyk@rs.com)
*  Created on: Sep 22, 2010 9:22:50 AM
*  Description: Program will delete and create data files then call
*    BUILD.XDEMO.DATAS & BUILD.XDEMO.DICTS to update the info in the files 
*
*  Version History
*    1.00 - Production release
*****************************************************************************
* Set Version Variables
PROGVERSION = "1.00"
PROGDATE = "09/29/2010"

* Initialization First
GOSUB INITIALIZATION

* Prompt for options
CRT "BUILD.XDEMO.FILES - Recreates Base XDEMO Files"
CRT "----------------------------------------------"

* Get Database info first
GOSUB GET.DATABASE.INFO
* Parse CLO's (Command Line Options)
GOSUB PARSE.COMMAND.LINE

* Display error if running old version of database for XML commands
OLD.VER = 0
IF DBMSTYPE = "UV" THEN
  IF XML.DIR = "" THEN XML.DIR = "&XML&"
  IF MAJ.VERSION <= 9 THEN OLD.VER = 1
  IF MAJ.VERSION = 10 AND MIN.VERSION = 0 THEN OLD.VER = 1
  IF OLD.VER THEN
    CRT "Program requires UniVerse 10.1.0 or higher to run."
    STOP
  END
 END ELSE
  IF XML.DIR = "" THEN XML.DIR = "_XML_"
  IF MAJ.VERSION < 6 THEN OLD.VER = 1
  IF MAJ.VERSION = 6 AND MIN.VERSION = 0 THEN OLD.VER = 1
  IF OLD.VER THEN
    CRT "Program requires UniData 6.1.0 or higher to run."
    STOP
  END  
END 

* Ask to continue first
IF NOT(FORCE.FLAG) THEN
 CRT "This program will delete and recreate the core XDEMO files."
 LOOP
  MEMO = "Do you want to continue(Y/<N>)?"
  DEFAULT.ANS = "N";VALID.OPTIONS = "NY";GOSUB GET.ANS  
 UNTIL UPCASE(ANS) = "Y" OR UPCASE(ANS) = "N"   
 REPEAT
 IF UPCASE(ANS) = "N" THEN
   CRT "Aborting execution of ":PROGNAME:"."
   STOP
 END
END  

IF NOT(FORCE.FLAG) THEN
 IF FILES.TO.PROCESS = "" THEN
 * Check on dictionary file to use
 CRT ""
 CRT "'All' Files include: "
 CRT "   LOCATIONS         PRODUCTS         STATES"  
 CRT "   MEMBERS           REGION           TRANSACTION.ACCUM"
 CRT "   PRODUCT.REVIEW    RENTAL.DETAILS         "
 CRT ""
 LOOP
  CRT "What files do you want to rebuild(C to Continue)?":;INPUT ANS
  BEGIN CASE
     CASE UPCASE(ANS) = "Q" 
        CRT "Exiting...";STOP
     CASE UPCASE(ANS) = "ALL"
        FOR A = 1 TO DCOUNT(ALL.FILES,@FM) 
          FILES.TO.PROCESS<-1> = ALL.FILES<A>
        NEXT A
        ANS = "C"
     CASE ANS = ""
       * Do nothing force another prompt
     CASE UPCASE(ANS) = "C"
       * Do nothing prompt was to continue
     CASE UPCASE(ANS) = "XDEMO.CONTROL"
       FILES.TO.PROCESS<-1> = "XDEMO.CONTROL"
     CASE 1
       * Check that files aren't in reserved list
       VALID.FILE = 1
       FOR R = 1 TO DCOUNT(RESERVED.FILES,@FM)
         IF UPCASE(ANS) = UPCASE(RESERVED.FILES<R>) THEN VALID.FILE = 0 
       NEXT R 
       IF VALID.FILE THEN
        VALID.FILE = 0
        FOR A = 1 TO DCOUNT(ALL.FILES,@FM)
          IF UPCASE(ANS) = UPCASE(ALL.FILES<A>) THEN VALID.FILE = 1
        NEXT A          
        IF VALID.FILE THEN
           FILES.TO.PROCESS<-1> = UPCASE(ANS)
          END ELSE
           CRT "File entered was not a XDEMO file, skipping."          
        END         
       END ELSE
         CRT "File entered was on reserved file list, skipping."
       END
      ANS = ""
    END CASE  
   UNTIL UPCASE(ANS) = "C"
  REPEAT
 END ELSE
  * Force flag not set but files.to.process is populated
  * Nothing is needed here
 END  
END ELSE
   * Force option enabled
   IF FILES.TO.PROCESS = "" THEN; *If empty go to all files
    FOR A = 1 TO DCOUNT(ALL.FILES,@FM) 
      FILES.TO.PROCESS<-1> = ALL.FILES<A>
    NEXT A   
   END 
END; *FORCE.FLAG

IF FILES.TO.PROCESS = "" THEN
  CRT "Files parameter in BUILD.XDEMO.FILES did not get set properly."
  CRT "Aborting BUILD.XDEMO.FILES!"
  STOP
END
* Check on Data XML to use
IF DEBUG.FLAG THEN CRT "BUILD.XDEMO.DATAS.XML.FILE: ":BUILD.XDEMO.DATAS.XML.FILE
IF NOT(SKIP.DATA.FLAG) AND BUILD.XDEMO.DATAS.XML.FILE = "" THEN
  GOSUB DEFAULT.DATAS.XML
  IF NOT(FORCE.FLAG) THEN 
    CRT "Default XML file for DATA importing is: ":BUILD.XDEMO.DATAS.XML.FILE
    LOOP 
      ANS = ""
      GOSUB DEFAULT.DATAS.XML
      CRT "What XML file do you want to use(<Default>)?":;INPUT ANS
      IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP
      IF UPCASE(ANS) # "" THEN
         XML.FILE = ANS; STOP.FLAG = 0
         GOSUB CHECK.XML.FILE 
         BUILD.XDEMO.DATAS.XML.FILE = ""
         IF XML.FILE = ANS THEN BUILD.XDEMO.DATAS.XML.FILE = XML.FILE          
      END      
     UNTIL BUILD.XDEMO.DATAS.XML.FILE # ""
    REPEAT   
  END
END ELSE
  * Skip prompt if skip flag was used, set default file to parameter
  IF BUILD.XDEMO.DATAS.XML.FILE = "" THEN GOSUB DEFAULT.DATAS.XML 
  XML.FILE = BUILD.XDEMO.DATAS.XML.FILE; STOP.FLAG = 1
  GOSUB CHECK.XML.FILE 
END

* Check on Dict XML to use
IF DEBUG.FLAG THEN CRT "BUILD.XDEMO.DICTS.XML.FILE: ":BUILD.XDEMO.DICTS.XML.FILE
IF NOT(SKIP.DICT.FLAG) AND BUILD.XDEMO.DICTS.XML.FILE = "" THEN
  GOSUB DEFAULT.DICTS.XML
  IF NOT(FORCE.FLAG) THEN 
    CRT "Default XML file for DICT importing is: ":BUILD.XDEMO.DICTS.XML.FILE  
    LOOP 
      ANS = ""
      GOSUB DEFAULT.DICTS.XML
      CRT "What XML file do you want to use(<Default>)?":;INPUT ANS
      IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP
      IF UPCASE(ANS) # "" THEN
         XML.FILE = ANS; STOP.FLAG = 0
         GOSUB CHECK.XML.FILE 
         BUILD.XDEMO.DICTS.XML.FILE = ""
         IF XML.FILE = ANS THEN BUILD.XDEMO.DICTS.XML.FILE = XML.FILE          
      END      
     UNTIL BUILD.XDEMO.DICTS.XML.FILE # ""
    REPEAT   
  END
END ELSE
  * Skip prompt if skip flag was used, set default file to parameter
  IF BUILD.XDEMO.DICTS.XML.FILE = "" THEN GOSUB DEFAULT.DICTS.XML  
  XML.FILE = BUILD.XDEMO.DICTS.XML.FILE; STOP.FLAG = 1
  GOSUB CHECK.XML.FILE   
END
*********************************************************************************************
* Core execution steps now
*********************************************************************************************
RECREATE.FILES.FLAG = 1
* Set recreate flag to 0 if one of the clear/skip options was set
IF CLEAR.ONLY.FLAG OR SKIP.DATA.FLAG OR SKIP.DICT.FLAG THEN RECREATE.FILES.FLAG = 0
IF RECREATE.FILES.FLAG THEN
  CRT "Deleting & Recreating Specified Files..."
  NUM.FILES = DCOUNT(FILES.TO.PROCESS,@FM)
  * Do loop through FILES.TO.PROCESS for deleting and recreating files
  FOR FILE.NUM = 1 TO NUM.FILES
   MY.CURRENT.FILE = FILES.TO.PROCESS<FILE.NUM>
   FP.LINE = 0; *FILE.PARAMS Line #
   FOR XX = 1 TO DCOUNT(FILES.PARAMS,@FM)
    IF MY.CURRENT.FILE = FILES.PARAMS<XX,1> THEN FP.LINE = XX
   NEXT XX
   IF FP.LINE = 0 THEN
     CRT "File creation parameters were not found for file: ":MY.CURRENT.FILE
     CRT "Stopping"
     STOP
   END
   GOSUB DELETE.XDEMO.FILE
   GOSUB CREATE.XDEMO.FILE
  NEXT FILE.NUM
 END ELSE
   * Only clear files (From CLO only, no prompt)
   IF NOT(SKIP.DATA.FLAG) THEN
     * Clear data files
     CRT "Clearing Specified Data Files."      
     NUM.FILES = DCOUNT(FILES.TO.PROCESS,@FM)
     FOR C = 1 TO NUM.FILES
       MY.CLEAR.FILE = FILES.TO.PROCESS<C>
       GOSUB CHECK.CLEAR.FILE
     NEXT C
   END
   IF NOT(SKIP.DICT.FLAG) THEN
     CRT "Clearing Specified Dictionary Files." 
     * Clear dictionary files
     NUM.FILES = DCOUNT(FILES.TO.PROCESS,@FM)
     FOR C = 1 TO NUM.FILES
       MY.CLEAR.FILE = "DICT ":FILES.TO.PROCESS<C>
       GOSUB CHECK.CLEAR.FILE
     NEXT C     
   END
END

* Clean up SAVEDLISTS, PH and TEMP.
* SAVEDLISTS
MY.CLEAR.FILE = ""
IF DBMSTYPE = "UV" THEN 
  MY.CLEAR.FILE = "&SAVEDLISTS&" 
  IF MY.CLEAR.FILE # "" THEN
    CRT "Clearing ":MY.CLEAR.FILE:" file."
    GOSUB CHECK.CLEAR.FILE
  END  
 END ELSE 
  CRT "Clearing Various SAVEDLISTS files."
  MY.CLEAR.FILE = "_SAVEDLISTS_";GOSUB CHECK.CLEAR.FILE 
  MY.CLEAR.FILE = "SAVEDLISTS";GOSUB CHECK.CLEAR.FILE
  MY.CLEAR.FILE = "SAVEDLISTSL";GOSUB CHECK.CLEAR.FILE
  MY.CLEAR.FILE = "savedlists";GOSUB CHECK.CLEAR.FILE      
END  

* PH
MY.CLEAR.FILE = ""
IF DBMSTYPE = "UV" THEN MY.CLEAR.FILE = "&PH&" ELSE MY.CLEAR.FILE = "_PH_" 
IF MY.CLEAR.FILE # "" THEN
  CRT "Clearing ":MY.CLEAR.FILE:" file."
  GOSUB CHECK.CLEAR.FILE
END  

* TEMP (UV Only)
* Uses MY.CURRENT.FILE not MY.CLEAR.FILE since it deletes the file.
IF DBMSTYPE = "UV" THEN
  MY.CURRENT.FILE = "&TEMP&"
  CRT "Recreating ":MY.CURRENT.FILE:" File."
  GOSUB DELETE.XDEMO.FILE
  IF PICK.STYLE = 0 THEN
    * Ideal
    CMD = "CREATE.FILE ":MY.CURRENT.FILE:" 18 3 1";GOSUB RUN.CMD
   END ELSE
    * Pick
    CMD = "CREATE.FILE ":MY.CURRENT.FILE:" 1,2,3 3,1,18";GOSUB RUN.CMD    
  END     
END

CRT "Compiling & Catalog Programs..."
* Compile/Decatalog/Catalog programs
IF NOT(SKIP.DICT.FLAG) THEN
  * Dict Portion
  REMOTE.PROGNAME = "BUILD.XDEMO.DICTS"
  GOSUB RUN.CATALOG.CMDS     
END
IF NOT(SKIP.DATA.FLAG) THEN
  * Data Portion
  REMOTE.PROGNAME = "BUILD.XDEMO.DATAS"  
  GOSUB RUN.CATALOG.CMDS 
END

* Build CLOs for BUILD calls 
* Buld Import portion of command lines (IMPORT.CLO)
IMPORT.CLO = ""
IF FILES.TO.PROCESS # ALL.FILES THEN
   FOR FF = 1 TO DCOUNT(FILES.TO.PROCESS,@FM)
     IF FF = 1 THEN 
        IMPORT.CLO = " -I ":FILES.TO.PROCESS<FF>
       END ELSE
        IMPORT.CLO = IMPORT.CLO:" -I ":FILES.TO.PROCESS<FF>
     END
   NEXT FF   
 END ELSE
   IMPORT.CLO = " -I ALL"
END

* SX Flag (Skip XDEMO Account Check)
SX.CLO = ""
IF SKIP.XDEMO.CHECK THEN SX.CLO = " -SX"

* Keep Work File Flag
KEEP.CLO = ""
IF KEEP.WORK.FILE THEN KEEP.CLO = " -K"

* Debug Flag
DEBUG.CLO = ""
IF DEBUG.FLAG THEN DEBUG.CLO = " -DEBUG"

* Execute Programs
IF NOT(SKIP.DICT.FLAG) THEN
  * Dict Portion
  REMOTE.PROGNAME = "BUILD.XDEMO.DICTS";* Has to be reset to current value
  GOSUB DISPLAY.LINE
  CRT "Calling ":REMOTE.PROGNAME:"..."    
  VOC.REC = ""
  READ VOC.REC FROM F.VOC,REMOTE.PROGNAME ELSE VOC.REC = ""
  IF VOC.REC = "" THEN 
     STARTER.CMD = "RUN U2BP ":REMOTE.PROGNAME
    END ELSE 
     STARTER.CMD = REMOTE.PROGNAME
  END 
  CMD = STARTER.CMD:DEBUG.CLO:KEEP.CLO:SX.CLO:" -X ":BUILD.XDEMO.DICTS.XML.FILE:IMPORT.CLO
  IF DEBUG.FLAG THEN
     CRT REMOTE.PROGNAME:" Command: "
     CRT CMD
   END

   GOSUB RUN.CMD   
   * Parse output in non-debug mode for records processed line.
   IF DEBUG.OUTPUT # "" AND DEBUG.FLAG = 0 THEN
     STRING.TO.FIND = "# OF RECORDS PROCESSED:"
     STRING.LENGTH=LEN(STRING.TO.FIND)
     FOR L = 1 TO DCOUNT(DEBUG.OUTPUT,@FM)
       MY.LINE = DEBUG.OUTPUT<L>
       UPCASE.MY.LINE = UPCASE(MY.LINE)
       SEARCH.STRING = UPCASE.MY.LINE[1,STRING.LENGTH]
       IF SEARCH.STRING = STRING.TO.FIND THEN CRT MY.LINE
     NEXT L
   END  
END
IF NOT(SKIP.DATA.FLAG) THEN
  * Data Portion
  REMOTE.PROGNAME = "BUILD.XDEMO.DATAS";* Has to be reset to current value
  GOSUB DISPLAY.LINE
  CRT "Calling ":REMOTE.PROGNAME:"..."  
  VOC.REC = ""
  READ VOC.REC FROM F.VOC,REMOTE.PROGNAME ELSE VOC.REC = ""
  IF VOC.REC = "" THEN 
     STARTER.CMD = "RUN U2BP ":REMOTE.PROGNAME
    END ELSE 
     STARTER.CMD = REMOTE.PROGNAME
  END 
  CMD = STARTER.CMD:DEBUG.CLO:KEEP.CLO:SX.CLO:" -X ":BUILD.XDEMO.DATAS.XML.FILE:IMPORT.CLO
  IF DEBUG.FLAG THEN
     CRT REMOTE.PROGNAME:" Command: "
     CRT CMD
   END  

   GOSUB RUN.CMD
   * Parse output in non-debug mode for records processed line.
   IF DEBUG.OUTPUT # "" AND DEBUG.FLAG = 0 THEN
     STRING.TO.FIND = "# OF RECORDS PROCESSED:"
     STRING.LENGTH=LEN(STRING.TO.FIND)
     FOR L = 1 TO DCOUNT(DEBUG.OUTPUT,@FM)
       MY.LINE = DEBUG.OUTPUT<L>
       UPCASE.MY.LINE = UPCASE(MY.LINE)
       SEARCH.STRING = UPCASE.MY.LINE[1,STRING.LENGTH]
       IF SEARCH.STRING = STRING.TO.FIND THEN CRT MY.LINE
     NEXT L
   END  
END
GOSUB DISPLAY.LINE
CRT PROGNAME:" Finished."
CLOSE F.VOC
STOP
*********************************************************************************************
* Internal Subroutines
*********************************************************************************************
DELETE.XDEMO.FILE:
 OPEN "",MY.CURRENT.FILE TO F.MY.CURRENT.FILE THEN FILE.EXISTS = 1 ELSE FILE.EXISTS = 0
 IF FILE.EXISTS THEN
     CLOSE F.MY.CURRENT.FILE
     IF DBMSTYPE = "UV" THEN
        CMD = "DELETE.FILE ":MY.CURRENT.FILE;GOSUB RUN.CMD
      END ELSE
        CMD = "DELETE.FILE ":MY.CURRENT.FILE:" FORCE";GOSUB RUN.CMD
     END
   END ELSE
    * Delete record if it exists
    CMD = "DELETE VOC ":MY.CURRENT.FILE;GOSUB RUN.CMD;* Delete record even if file doesn't exist
    DELETE.FNAME = MY.CURRENT.FILE
    GOSUB DELETE.NONEXISTING.FILE
 END

RETURN

DELETE.NONEXISTING.FILE:
    * Delete record if it exists, uses DELETE.FNAME record
      UFD.REC = ""
      IF DBMSTYPE = "UV" THEN UFD.REC<1> = "F" ELSE UFD.REC<1> = "DIR"
      UFD.REC<2> = ".";UFD.REC<3> = "D_U2BP"
      WRITE UFD.REC ON F.VOC,"XDEMO.UFD" ON ERROR UFD.REC = ""
      UFD.REC = ""
      READ UFD.REC FROM F.VOC,"XDEMO.UFD" ELSE UFD.REC = ""      
      IF UFD.REC # "" THEN
         CMD = "DELETE XDEMO.UFD ":DELETE.FNAME;GOSUB RUN.CMD;* Delete record via UFD if having further problems
         CMD = "DELETE XDEMO.UFD D_":DELETE.FNAME;GOSUB RUN.CMD;* Delete record via UFD if having further problems            
      END  
      CMD = "DELETE VOC XDEMO.UFD";GOSUB RUN.CMD
      DELETE.FNAME = ""
RETURN

CHECK.CLEAR.FILE:
 IF MY.CLEAR.FILE # "" THEN
   READ MY.REC FROM F.VOC,MY.CLEAR.FILE ELSE MY.REC = ""
   IF MY.REC # "" THEN
     CMD = "CLEAR.FILE ":MY.CLEAR.FILE;GOSUB RUN.CMD
   END
 END     
RETURN

DISPLAY.LINE:
   CRT "----------------------------------------------" 
RETURN

CHECK.XML.FILE:
      OPEN.ERROR = 0
      OPENSEQ XML.DIR, XML.FILE TO F.INCOMING.XML ELSE OPEN.ERROR = 1
      IF OPEN.ERROR THEN
         IF STOP.FLAG THEN
            STOP "Error opening '":XML.FILE:"' file. Aborting!"
           END ELSE 
            XML.FILE = "";CRT "Error opening given file."           
         END
       END ELSE
         CLOSESEQ F.INCOMING.XML
      END
   STOP.FLAG = 0
RETURN

CREATE.XDEMO.FILE:
   * FILES.PARAMS - Define CREATE.FILE Parameters
   * FP.LINE,1 - Filename
   * All parameters should NOT start with 1 space character
   * Default hash syntax is in ()'s below
   * FP.LINE,2 - UV Ideal parameters (Type+Space+Modulo+Space+Sep)
   * UV-IDeal: Default dictionary is type 3, mod 1, sep 2 if skipped
   * FP.LINE,3 - UV Pick parameters 
   *  For line above (Dict_Modulo+Comma+Dict_Sep+Comma+Dict_Type+Space+Data_Modulo+Comma+Data_Sep+Comma+Data_Type)
   * FP.LINE,4 - UDT parameters (Modulo+Comma+Sep) 
 IF DBMSTYPE = "UV" THEN
  IF PICK.STYLE = 0 THEN
    * Ideal
    CMD = "CREATE.FILE ":MY.CURRENT.FILE:" ":FILES.PARAMS<FP.LINE,2>;GOSUB RUN.CMD
   END ELSE
    * Pick
    CMD = "CREATE.FILE ":MY.CURRENT.FILE:" ":FILES.PARAMS<FP.LINE,3>;GOSUB RUN.CMD    
  END     
 END ELSE
  * UniData
  CMD = "create.file ":MY.CURRENT.FILE:" ":FILES.PARAMS<FP.LINE,4>;GOSUB RUN.CMD
 END
 
 * Want to add PRODUCT_REVIEW VOC pointer for PRODUCT.REVIEW
 IF MY.CURRENT.FILE = "PRODUCT.REVIEW" THEN
   READ MY.REC FROM F.VOC,"PRODUCT.REVIEW" ELSE MY.REC = ""
   IF MY.REC # "" THEN
     WRITE MY.REC ON F.VOC,"PRODUCT_REVIEW" ON ERROR NULL
   END
 END
RETURN

RUN.CATALOG.CMDS:
  COMPILE.OPTIONS = ""
  U2BP.REC = ""
  READ U2BP.REC FROM F.U2BP,REMOTE.PROGNAME ELSE U2BP.REC = ""
  IF U2BP.REC THEN
    IF DBMSTYPE = "UV" AND NOT(DEBUG.FLAG) THEN COMPILE.OPTIONS = " -I"
    CMD = "BASIC U2BP ":REMOTE.PROGNAME:COMPILE.OPTIONS;GOSUB RUN.CMD  
    IF DBMSTYPE = "UV" THEN
     * Delete First
     * Run twice and then include account name and global
     IF DEBUG.FLAG THEN CRT "Removing catalog for: ":REMOTE.PROGNAME     
     CMD = "DELETE.CATALOG ":REMOTE.PROGNAME;GOSUB RUN.CMD
     CMD = "DELETE.CATALOG ":REMOTE.PROGNAME;GOSUB RUN.CMD       
     CMD = "DELETE.CATALOG *XDEMO*":REMOTE.PROGNAME;GOSUB RUN.CMD
     CMD = "DELETE.CATALOG *":REMOTE.PROGNAME;GOSUB RUN.CMD
     * Now Catalog (Local)       
     IF DEBUG.FLAG THEN CRT "Cataloging: ":REMOTE.PROGNAME         
     CMD = "CATALOG U2BP ":REMOTE.PROGNAME:" LOCAL FORCE";GOSUB RUN.CMD       
    END ELSE
     * Delete First
     * Run 3 times for good measure
     IF DEBUG.FLAG THEN CRT "Deleting catalog for: ":REMOTE.PROGNAME
     CMD = "DELETE.CATALOG ":REMOTE.PROGNAME;GOSUB RUN.CMD  
     CMD = "DELETE.CATALOG ":REMOTE.PROGNAME;GOSUB RUN.CMD     
     CMD = "DELETE.CATALOG ":REMOTE.PROGNAME;GOSUB RUN.CMD
     * Now Catalog (Direct)
     IF DEBUG.FLAG THEN CRT "Cataloging: ":REMOTE.PROGNAME     
     CMD = "CATALOG U2BP ":REMOTE.PROGNAME:" DIRECT FORCE";GOSUB RUN.CMD  
    END
   END ELSE
    IF DEBUG.FLAG THEN CRT "No item found with id: ":REMOTE.PROGNAME
  END   
RETURN


DEFAULT.DATAS.XML:
   IF DBMSTYPE = "UV" THEN 
     BUILD.XDEMO.DATAS.XML.FILE = DEFAULT.UV.BUILD.XDEMO.DATAS.XML.FILE
    END ELSE 
     BUILD.XDEMO.DATAS.XML.FILE = DEFAULT.UDT.BUILD.XDEMO.DATAS.XML.FILE
   END
RETURN

DEFAULT.DICTS.XML:
   IF DBMSTYPE = "UV" THEN 
     BUILD.XDEMO.DICTS.XML.FILE = DEFAULT.UV.BUILD.XDEMO.DICTS.XML.FILE
    END ELSE 
     BUILD.XDEMO.DICTS.XML.FILE = DEFAULT.UDT.BUILD.XDEMO.DICTS.XML.FILE
   END
RETURN

INITIALIZATION:
   PROGNAME = "BUILD.XDEMO.FILES"; * Displayed on Program Run
   PROGNAME.WORK = PROGNAME:".WORK"

   PROMPT ""
   STATUS = ""
   ANS = ""; DEFAULT.ANS = "";MEMO = ""
   JUNK = @(0,0); * Fix for 'Press Any Key'
   RUN.SENTENCE = @SENTENCE; * Must be saved before GET.DB.INFO is run  
   DEBUG.OUTPUT = ""; * For SKIP.DEBUG.DISPLAY

   * Files
   BUILD.XDEMO.DATAS.XML.FILE = ""
   DEFAULT.UDT.BUILD.XDEMO.DATAS.XML.FILE = "XDEMO.UDT.DEFAULT.DATAS.XML"
   DEFAULT.UV.BUILD.XDEMO.DATAS.XML.FILE = "XDEMO.UV.DEFAULT.DATAS.XML"     
   BUILD.XDEMO.DICTS.XML.FILE = ""
   DEFAULT.UDT.BUILD.XDEMO.DICTS.XML.FILE = "XDEMO.UDT.DEFAULT.DICTS.XML"
   DEFAULT.UV.BUILD.XDEMO.DICTS.XML.FILE = "XDEMO.UV.DEFAULT.DICTS.XML"   
   XML.DIR = ""; * Set after database check or via CLO's.
   MY.CURRENT.FILE = "";MY.CLEAR.FILE = ""
     
   *Flags
   KEEP.WORK.FILE = 0;* Deletes Work file at end of program execution
   SKIP.XDEMO.CHECK = 0;* Default is to check for a XDEMO record since it clears files
   DEBUG.FLAG = 0;* Enabled on -DEBUG command line, shows output from EXECUTE CMDs   
   OVERRIDE.EXPORT.IMPORT = 0; * 0 will prompt user, 1 will be given at command line    
   SKIP.DATA.FLAG = 0; *1 will skip call to BUILD.XDEMO.DATAS   
   SKIP.DICT.FLAG = 0; *1 will skip call to BUILD.XDEMO.DICTS
   FORCE.FLAG = 0;* Force option will take defaults
   VALID.FILE = 0;* For File Checks
   CLEAR.ONLY.FLAG = 0; * For -CLEAR CLO
   FROM.INIT.FLAG = 0;* Has problems with DEBUG.OUTPUT on UDT, when called from INITIALIZE.XDEMO
   STOP.FLAG = 0;* Used for CHECK.XML.FILE routine.
   
   * Arrays of Filenames  
   RESERVED.FILES=""
   RESERVED.FILES<-1>="VOC"
   RESERVED.FILES<-1>="VOCLIB"
   RESERVED.FILES<-1>="NEWACC"
   RESERVED.FILES<-1>="APP.PROGS"
   RESERVED.FILES<-1>="BASIC.HELP"
   RESERVED.FILES<-1>="BCI.HELP"
   RESERVED.FILES<-1>="BP"
   RESERVED.FILES<-1>="BP.O"
   RESERVED.FILES<-1>="U2BP"
   RESERVED.FILES<-1>="U2BP.O"
   RESERVED.FILES<-1>="DICT.DICT"
   RESERVED.FILES<-1>="DICT.PICK"
   RESERVED.FILES<-1>="ERRMSG"
   RESERVED.FILES<-1>="GLOBAL.CATDIR"
   RESERVED.FILES<-1>="PTERM.FILE"
   RESERVED.FILES<-1>="SYS.HELP"
   RESERVED.FILES<-1>="SYS.MESSAGE"
   RESERVED.FILES<-1>="UNIVERSE.INCLUDE"
   RESERVED.FILES<-1>="UNIVERSE.STAT.FILE"
   RESERVED.FILES<-1>="UNIVERSE.VOCLIB"
   RESERVED.FILES<-1>="UV.SAVEDLISTS"
   
   * All XDEMO Files (if using ALL option)
   ALL.FILES = ""
   ALL.FILES<-1> = "LOCATIONS"
   ALL.FILES<-1> = "MEMBERS"
   ALL.FILES<-1> = "PRODUCT.REVIEW"
   ALL.FILES<-1> = "PRODUCTS"
   ALL.FILES<-1> = "REGION"
   ALL.FILES<-1> = "RENTAL.DETAILS"
   ALL.FILES<-1> = "STATES"   
   ALL.FILES<-1> = "TRANSACTION.ACCUM"
   
   * FILES.PARAMS - Define CREATE.FILE Parameters
   * FP.LINE,1 - Filename
   * All parameters should NOT start with 1 space character
   * Default hash syntax is in ()'s below
   * FP.LINE,2 - UV Ideal parameters (Type+Space+Modulo+Space+Sep)
   * UV-IDeal: Default dictionary is type 3, mod 1, sep 2 if skipped
   * FP.LINE,3 - UV Pick parameters 
   *  For line above (Dict_Modulo+Comma+Dict_Sep+Comma+Dict_Type+Space+Data_Modulo+Comma+Data_Sep+Comma+Data_Type)
   * FP.LINE,4 - UDT parameters (Modulo+Comma+Sep)  

   FILES.PARAMS = ""
   
   FILES.PARAMS<1,1> = "LOCATIONS";FILES.PARAMS<1,2> = "2 3 1"
   FILES.PARAMS<1,3> = "1,2,3 3,1,2";FILES.PARAMS<1,4> = "3,4"      
   FILES.PARAMS<2,1> = "MEMBERS";FILES.PARAMS<2,2> = "2 277 8"
   FILES.PARAMS<2,3> = "1,2,3 277,8,2";FILES.PARAMS<2,4> = "277,4"        
   FILES.PARAMS<3,1> = "PRODUCT.REVIEW";FILES.PARAMS<3,2> = "2 3 1"
   FILES.PARAMS<3,3> = "1,2,3 3,1,2";FILES.PARAMS<3,4> = "3,2"      
   FILES.PARAMS<4,1> = "PRODUCTS";FILES.PARAMS<4,2> = "2 57 8"
   FILES.PARAMS<4,3> = "1,2,3 57,8,2";FILES.PARAMS<4,4> = "47,8"    
   FILES.PARAMS<5,1> = "REGION";FILES.PARAMS<5,2> = "2 3 4"
   FILES.PARAMS<5,3> = "1,2,3 3 4 2";FILES.PARAMS<5,4> = "3,4"    
   FILES.PARAMS<6,1> = "RENTAL.DETAILS";FILES.PARAMS<6,2> = "2 317 4"
   FILES.PARAMS<6,3> = "1,2,3 317,4,2";FILES.PARAMS<6,4> = "223,4"     
   FILES.PARAMS<7,1> = "STATES";FILES.PARAMS<7,2> = "4 7 1"
   FILES.PARAMS<7,3> = "1,2,3 7,1,4";FILES.PARAMS<7,4> = "3,4"      
   FILES.PARAMS<8,1> = "TRANSACTION.ACCUM";FILES.PARAMS<8,2> = "18 1 1"
   FILES.PARAMS<8,3> = "1,2,3 1,1,18";FILES.PARAMS<8,4> = "1,2"    
   FILES.PARAMS<9,1> = "XDEMO.CONTROL";FILES.PARAMS<9,2> = "18 3 2"
   FILES.PARAMS<9,3> = "1,2,3 3,2,18";FILES.PARAMS<9,4> = "3,2" 
      
   FILES.TO.SKIP = "";* To Display skipped files at end   
   FILES.TO.PROCESS = ""; * Files to work on during program  
   
   OPEN "","VOC" TO F.VOC ELSE STOP "Open VOC Error in ":PROGNAME:"."  
   OPEN "","U2BP" TO F.U2BP ELSE STOP "Open U2BP Error in ":PROGNAME:"."    
RETURN


PARSE.COMMAND.LINE:
* Check Command line options
CONVERT " " TO @FM IN RUN.SENTENCE
* RUN U2BP PROGNAME CLO1 (4th) or PROGNAME CLO1 (2nd)
IF UPCASE(RUN.SENTENCE<1>) = "RUN" THEN START.POSITION = 4 ELSE START.POSITION = 2
CLO.SENTENCE = ""; * Short for Command Line Options
PROCESS.TYPE = ""
FOR X = START.POSITION TO DCOUNT(RUN.SENTENCE, @FM)
  CLO.SENTENCE<-1> = RUN.SENTENCE<X>
NEXT X
* Now parse through CLOs to get parameters for program
CHECK.NEXT.OPTION = 1
FILES.TO.PROCESS = ""; * Clear first
IF CLO.SENTENCE # "" THEN CRT "Validating Command Line Options..."
FOR X = 1 TO DCOUNT(CLO.SENTENCE, @FM)
  MY.PARAM = CLO.SENTENCE<X>
  MY.PARAM2 = CLO.SENTENCE<X+1>
  IF CHECK.NEXT.OPTION THEN 
    BEGIN CASE
      * Command line otions
     CASE UPCASE(MY.PARAM) = "-H" OR UPCASE(MY.PARAM) = "-HELP"
       * Help syntax
       GOSUB SHOW.SYNTAX
       STOP  
     CASE UPCASE(MY.PARAM) = "-V" OR UPCASE(MY.PARAM) = "-VER" OR UPCASE(MY.PARAM) = "-VERSION"
       * Version syntax
       CRT "Program Version: ":PROGVERSION
       CRT "Program Date: ":PROGDATE
       STOP
     CASE UPCASE(MY.PARAM) = "-CLEAR"
       CLEAR.ONLY.FLAG = 1  
       CHECK.NEXT.OPTION = 1            
     CASE UPCASE(MY.PARAM) = "-DEBUG"
       DEBUG.FLAG = 1  
       CHECK.NEXT.OPTION = 1          
     CASE UPCASE(MY.PARAM) = "-K" OR UPCASE(MY.PARAM) = "-KEEP"
       KEEP.WORK.FILE = 1  
       CHECK.NEXT.OPTION = 1
     CASE UPCASE(MY.PARAM) = "-FORCE"
       * Skips prompt(s) for automatic processing
       FORCE.FLAG = 1
       CHECK.NEXT.OPTION = 1
     CASE UPCASE(MY.PARAM) = "-SKIP.DATA"
       * Skips call to BUILD.XDEMO.DATAS     
       SKIP.DATA.FLAG = 1
       CHECK.NEXT.OPTION = 1        
     CASE UPCASE(MY.PARAM) = "-SKIP.DICT"
       * Skips call to BUILD.XDEMO.DATAS    
       SKIP.DICT.FLAG = 1
       CHECK.NEXT.OPTION = 1      
     CASE UPCASE(MY.PARAM) = "-SX"
       * Skip XDEMO account check   
       SKIP.XDEMO.CHECK = 1; *Skips check for XDEMO record, since program clears files
       CHECK.NEXT.OPTION = 1        
     CASE UPCASE(MY.PARAM) = "-FROM.INIT" AND DBMSTYPE = "UDT"
       FROM.INIT.FLAG = 1                
       CHECK.NEXT.OPTION = 1
     CASE UPCASE(MY.PARAM) = "-F" 
       * Allows for partial file processing list
       * Check if file is not part of reserved list
           VALID.FILE = 1
           IF UPCASE(MY.PARAM2) # "ALL" THEN
             FOR R = 1 TO DCOUNT(RESERVED.FILES,@FM)
              IF UPCASE(MY.PARAM2) = UPCASE(RESERVED.FILES<R>) THEN VALID.FILE = 0
             NEXT R
             * Second valid check to add to processing list.  
             IF VALID.FILE THEN
               VALID.FILE = 0
               FOR A = 1 TO DCOUNT(ALL.FILES,@FM)
                 IF UPCASE(MY.PARAM2) = UPCASE(ALL.FILES<A>) THEN VALID.FILE = 1
               NEXT A          
               IF UPCASE(MY.PARAM2) = "XDEMO.CONTROL" THEN VALID.FILE = 1             
               IF VALID.FILE THEN
               FILES.TO.PROCESS<-1> = UPCASE(MY.PARAM2)
               END ELSE
                 CRT "File entered was not a XDEMO file, skipping."          
               END         
              END ELSE
             CRT "File entered was on reserved file list, skipping."
            END
           END ELSE
             * All files
             FOR A = 1 TO DCOUNT(ALL.FILES,@FM) 
               FILES.TO.PROCESS<-1> = ALL.FILES<A>
             NEXT A             
          END            
       CHECK.NEXT.OPTION = 0;* Skip Next option         
     CASE UPCASE(MY.PARAM) = "-XML.DATA"
       * XML File to use during BUILD.XDEMO.DATAS
       BUILD.XDEMO.DATAS.XML.FILE = MY.PARAM2
       CHECK.NEXT.OPTION = 0;* Skip Next option
     CASE UPCASE(MY.PARAM) = "-XML.DICT"
       * XML File to use during BUILD.XDEMO.DATAS
       BUILD.XDEMO.DICTS.XML.FILE = MY.PARAM2
       CHECK.NEXT.OPTION = 0;* Skip Next option                           
      CASE 1  
        * Do Nothing
    END CASE
   END ELSE
    * Option was taken care of in last loop
    CHECK.NEXT.OPTION = 1
  END
NEXT X
* Check for both skip flags
 IF SKIP.DICT.FLAG AND SKIP.DATA.FLAG THEN
   CRT "Both skip options can't be selected, stopping."
   STOP
 END ELSE
    IF SKIP.DICT.FLAG THEN CRT "Skip Dict option selected, only clearing data files."
    IF SKIP.DATA.FLAG THEN CRT "Skip Data option selected, only clearing dict files."          
 END
     
* Do XDEMO record check here
IF NOT(SKIP.XDEMO.CHECK) THEN
  FOUND.REC = 1
  READ REC FROM F.VOC,"XDEMO.VERSION" ELSE FOUND.REC = 0
  IF NOT(FOUND.REC) THEN
    CRT "Stopping program, need to be logged into XDEMO account."
    STOP
  END
  REC = ""
END

IF FILES.TO.PROCESS # "" THEN
 CRT "These files will be recreated: "
 FOR D = 1 TO DCOUNT(FILES.TO.PROCESS,@FM)
  CRT "  ":FILES.TO.PROCESS<D>
 NEXT D
END
IF CLO.SENTENCE # "" THEN GOSUB DISPLAY.LINE
RETURN

SHOW.SYNTAX:
    * FROM.INIT parameter is not shown in help.
    CRT "This program can recreate core XDEMO files."
    CRT ""
    CRT "Available Options:"
    CRT " (No Options)         <-- Standard Method"
    CRT " -CLEAR               <-- Clears files rather than recreates them"
    CRT " -DEBUG               <-- Executes commands without hiding output"    
    CRT " -H                   <-- Gives this info"
    CRT " -F FILENAME          <-- Only rebuilds FILENAME"
    CRT " -FORCE               <-- Skips prompt at beginning of program"
    CRT " -K(EEP)              <-- Keep Work file at end of program"
    CRT " -SKIP.DATA           <-- Skips call to BUILD.XDEMO.DATAS program"
    CRT " -SKIP.DICT           <-- Skips call to BUILD.XDEMO.DATAS program"    
    CRT " -SX                  <-- Skips check for XDEMO Account"
    CRT " -XML.DATA FILENAME   <-- XML File to use during BUILD.XDEMO.DATAS program"    
    CRT " -XML.DICT FILENAME   <-- XML File to use during BUILD.XDEMO.DICTS program"
    CRT " -V                   <-- Gives version of program"
    CRT ""    
    LOOP
       ANS = ""
       MEMO = "Do you want to see additional details(Y/<N>)?"
       DEFAULT.ANS = "N";VALID.OPTIONS = "NY";GOSUB GET.ANS  
       IF UPCASE(ANS) = "N" OR UPCASE(ANS) = "Q" THEN STOP
      UNTIL UPCASE(ANS) = "Y" OR UPCASE(ANS) = "N"   
    REPEAT
    CRT "Options other than -H & -V can be combined. By default all core XDEMO"
    CRT "files will be recreated and repopulated. This includes: LOCATIONS, MEMBERS,"
    CRT "PRODUCT.REVIEW, PRODUCTS, REGION, RENTAL.DETAILS, STATES and TRANSACTION.ACCUM."
    CRT "Use the '-F FILENAME' option to only rebuild one file."
    CRT ""
    CRT "If the -CLEAR, -SKIP.DATA or -SKIP.DICT options are used, the files are not"
    CRT "deleted and recreated, only cleared. The SKIP.. options won't clear the noted"
    CRT "type of file (DICT/DATA)." 
    CRT ""
    STOP
RETURN

GET.ANS: 
CORRECT.ANS = ""
LOOP
  ANS = ""
  CRT MEMO:;INPUT ANS
  ANS = UPCASE(ANS)
  IF ANS = "" THEN ANS = UPCASE(DEFAULT.ANS)
  IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP ;* Always allow to quit
  VALID.ANS = 0
  FOR V = 1 TO LEN(VALID.OPTIONS)
    IF UPCASE(ANS) = UPCASE(ANS[V,1]) THEN 
       VALID.ANS = 1
       CORRECT.ANS = UPCASE(ANS)
    END
  NEXT V
UNTIL VALID.ANS
REPEAT
IF CORRECT.ANS # "" THEN ANS = CORRECT.ANS
DEFAULT.ANS = "";MEMO = ""
RETURN

RUN.CMD:
  * Got tired of taking out capturing text during testing so added flag
  IF CMD # "" THEN
     IF DEBUG.FLAG OR FROM.INIT.FLAG THEN
       EXECUTE CMD
      END ELSE
       DEBUG.OUTPUT = ""; * To show specific info in non-debug mode
       EXECUTE CMD CAPTURING DEBUG.OUTPUT     
     END
   END ELSE
    CRT "Command parameter was not set, stopping.";STOP
  END
  CMD = "";*Should always be set to something before next call to this subroutine
RETURN

GET.DATABASE.INFO:
 *Details come from Brian's GET.DB.INFO subroutine

* DB.INFO.RTN return values are:
* 0 for successful run
* 1 for unsuccessful run of subroutine, it means DBMSTYPE can't be found

* General Info
* SYSTEM(32) needs to be passed to the subroutine, to get basictype used during main program execution and not this subroutine.
* PICK.STYLE: SET TO 1 IF ECLTYPE P, OR IF UV SYSTEM(1001) IS 2, 8 OR 16; DEFAULT SETTING
* PICK.STYLE: SET TO 0 IF ECLTYPE U, OR IF UV SYSTEM(1001) IS 1, 4 OR 64
* FLAVOR values: IDEAL, IN2, INFO, MICRO, OTHER, PICK, PIOPEN, REALITY, UDT   (OTHER only used if can't find flavor)
* DBMSTYPE values: UDT, UV
* ECLTYPE: P, U, or empty for UV DBMSTYPE
* BASICTYPE: P, U, M or R for UDT and empty for UV DBMSTYPE
* OSTYPE: 0 for Unix and 1 for Windows
 
DB.INFO.RTN = 0
VERSION = "";MAJ.VERSION = "";MIN.VERSION = "";PNT.VERSION = ""
SYS9010 = UPCASE(SYSTEM(9010))[1,2]
SYS32 = SYSTEM(32)
BEGIN CASE
  CASE SYS9010 = "UV"
     DBMSTYPE = "UV"
  CASE SYS9010 = "UD"
     DBMSTYPE = "UDT"
  CASE 1
     IF LEN(SYS32) = 1 THEN DBMSTYPE = "UDT" ELSE DBMSTYPE = "UV"
END CASE
BEGIN CASE
  CASE DBMSTYPE = "UDT"
    * Check if called directly first.
    IF SYSTEM(17) = 0; *Should be 1 or 2, when called as subroutine
     THEN
      CRT "Can not call this program directly!"
      RETURN
    END
    BASICTYPE = UPCASE(SYS32) 
    BEGIN CASE
      CASE SYS32 = "p"
        FLAVOR = "PICK" 
      CASE SYS32 = "u" 
        FLAVOR = "UDT"
      CASE SYS32 = "r"
        FLAVOR = "REALITY"    
      CASE SYS32 = "m"
        FLAVOR = "MICRO"
      CASE 1
        FLAVOR = "OTHER"
    END CASE;   *CASE SYS32
      EXECUTE "ECLTYPE" CAPTURING ECLTEMP
      FINDSTR "ON" IN ECLTEMP SETTING FM, VM, SM THEN ECLTYPE = "P" ELSE ECLTYPE = "U"      
      IF ECLTYPE = "P" THEN
        PICK.STYLE = 1
        SELECT.VOC = 'SSELECT VOC WITH F1 = "F]" OR WITH F1 = "f]" OR WITH F1 = "DIR]" OR WITH F1 = "dir]" OR WITH F1 = "LF]" OR WITH F1 = "lf]" OR WITH F1 = "LD]" OR WITH F1 = "ld]" USING DICT VOC'
      END ELSE
        PICK.STYLE = 0
        SELECT.VOC = 'SSELECT VOC WITH F1 LIKE "F..." OR WITH F1 LIKE "f..." OR WITH F1 LIKE "DIR..." OR WITH F1 LIKE "dir..." OR WITH F1 LIKE "LF..." OR WITH F1 LIKE "lf..." OR WITH F1 LIKE "LD..." OR WITH F1 LIKE "ld..." USING DICT VOC'
      END
  
    * UDT.OPTIONS 16: ONLY DISPLAYS TOTAL # OF RECS DELETED ON DELETE VOC
    EXECUTE "UDT.OPTIONS 16 ON" 
    * Build Version value
    EXECUTE "VERSION" CAPTURING VERTEMP
    VER.LINE = DCOUNT(VERTEMP,CHAR(254)) - 1
    LEN.VERSION = LEN(VERTEMP<VER.LINE>) 
    MAJ.VERSION = VERTEMP<VER.LINE>[1,1]
    MIN.VERSION = VERTEMP<VER.LINE>[2,1]
    PNT.VERSION = ""
    PNT2.VERSION = ""
    FOR X = 3 TO LEN.VERSION
      IF NUM(VERTEMP<VER.LINE>[X,1]) THEN
        PNT.VERSION := VERTEMP<VER.LINE>[X,1]
       END ELSE
        PNT2.VERSION := UPCASE(VERTEMP<VER.LINE>[X,1])
      END  
    NEXT X
    IF PNT2.VERSION = "" THEN
     VERSION = MAJ.VERSION:".":MIN.VERSION:".":PNT.VERSION
    END ELSE
     VERSION = MAJ.VERSION:".":MIN.VERSION:".X.":PNT2.VERSION     
    END
   * OSTYPE
   IF UPCASE(SYSTEM(33)) = "UNIX" THEN OSTYPE = 0 ELSE OSTYPE = 1
** END OF DBMSTYPE = "UDT"

  CASE DBMSTYPE = "UV"
    BASICTYPE = ""
    ECLTYPE = ""
    IF UPCASE(FIELD(@SENTENCE, " ",1)) = "RUN" AND UPCASE(FIELD(@SENTENCE, " ",1)) = "GET.DB.INFO" THEN
       CRT "Can not call this program directly!"
       RETURN    
     END
      BEGIN CASE 
        CASE SYSTEM(1001) = 1
          PICK.STYLE = 0
          FLAVOR = "IDEAL"
        CASE SYSTEM(1001) = 4
          PICK.STYLE = 0
          FLAVOR = "INFO"
        CASE SYSTEM(1001) = 64
          PICK.STYLE = 0
          FLAVOR = "PIOPEN"
        CASE SYSTEM(1001) = 2
          PICK.STYLE = 1
          FLAVOR = "PICK"
        CASE SYSTEM(1001) = 8
          PICK.STYLE = 1
          FLAVOR = "REALITY"
        CASE SYSTEM(1001) = 16
          PICK.STYLE = 1
          FLAVOR = "IN2"
        CASE 1
          PICK.STYLE = 1
      END CASE;    *CASE SYSTEM(1001)
      IF PICK.STYLE = 1 THEN 
        SELECT.VOC = 'SSELECT VOC WITH F1 = "F]" OR WITH F1 = "Q"'
      END ELSE
        SELECT.VOC = 'SSELECT VOC WITH F1 LIKE "F..." OR WITH F1 = "Q"'  
      END
   * Get Version
   EXECUTE "CT VOC RELLEVEL" CAPTURING VERTEMP
   VERSION = FIELD(VERTEMP<7>," ",2) 
   MAJ.VERSION = FIELD(VERSION,".",1)
   MIN.VERSION = FIELD(VERSION,".",2)
   PNT.VERSION = FIELD(VERSION,".",3)
   * OSTYPE
   OSTYPE = SYSTEM(91)  
** END OF DBMSTYPE = "UV"

  CASE 1
    DB.INFO.RTN = 1
    DB.INFO.REC = ""
END CASE;    *CASE DBMSTYPE
RETURN
