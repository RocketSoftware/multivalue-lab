*******************************************************************************
*
*       Program BUILD.XDEMO.DATAS
*       Copyright Rocket Software, Rocket U2 (C) 2010
*
*******************************************************************************
*
*  Author: Brian Kupzyk (bkupzyk@rs.com)
*  Created on: Sep. 17, 2010
*  Description: Program to import/export data files  
*
*  Version History
*    1.00 - Production release
*****************************************************************************
* Set Version Variables
PROGVERSION = "1.00"
PROGDATE = "09/29/2010"

* Initialization First
GOSUB INITIALIZATION

* Prompt for options
CRT "BUILD.XDEMO.DATAS - Imports/Exports XDEMO Data Files"
CRT "----------------------------------------------------"

* Get Database info first
GOSUB GET.DATABASE.INFO
* Parse CLO's (Command Line Options)
GOSUB PARSE.COMMAND.LINE

* Display error if running old version of database for XML commands
OLD.VER = 0
* XML Equates
* XML RETCODES and defines.
EQU XML.SUCCESS             TO        0
EQU XML.ERROR               TO       -1
EQU XML.INVALID.HANDLE      TO       -2
EQU XML.EOF                 TO      100

* Open mode for XMAPOpen() and XMLOpen()
EQU XML.READ                TO      0
EQU XML.WRITE               TO      1
EQU XML.READWRITE           TO      2
EQU XML.CREATE              TO      3

* Write mode for XMLWrite()
EQU XML.TO.FILE             TO      0
EQU XML.TO.STRING           TO      1
EQU XML.TO.DOM              TO      2

* Flag for form File or from STRING
EQU XML.FROM.FILE           TO      0
EQU XML.FROM.STRING         TO      1
EQU XML.FROM.DOM            TO      2

* Flag for form File or from STRING
EQU XMAP.FROM.FILE          TO      0
EQU XMAP.FROM.STRING        TO      1
EQU XMAP.FROM.DOM           TO      2

IF DBMSTYPE = "UV" THEN
  IF XML.DIR = "" THEN XML.DIR = "&XML&"
  IF MAJ.VERSION <= 9 THEN OLD.VER = 1
  IF MAJ.VERSION = 10 AND MIN.VERSION = 0 THEN OLD.VER = 1
  IF OLD.VER THEN
    CRT "Program requires UniVerse 10.1.0 or higher to run."
    STOP
  END
 END ELSE
  IF XML.DIR = "" THEN XML.DIR = "_XML_"
  IF MAJ.VERSION < 6 THEN OLD.VER = 1
  IF MAJ.VERSION = 6 AND MIN.VERSION = 0 THEN OLD.VER = 1
  IF OLD.VER THEN
    CRT "Program requires UniData 6.1.0 or higher to run."
    STOP
  END  
END  
   
IF NOT(OVERRIDE.EXPORT.IMPORT) THEN
  * Prompt if not given at command line
  MEMO = "Do you want to Import or Export dictionaries (<E>/I)?"
  DEFAULT.ANS = "E";VALID.OPTIONS = "EI";GOSUB GET.ANS 
  IF UPCASE(ANS) = "E" THEN PROCESS.TYPE = "E" ELSE PROCESS.TYPE = "I"

* Check on dictionary file to use
CRT ""
CRT "'All' Files include: "
CRT "   LOCATIONS         PRODUCTS         STATES"  
CRT "   MEMBERS           REGION           TRANSACTION.ACCUM"
CRT "   PRODUCT.REVIEW    RENTAL.DETAILS         "
CRT ""
LOOP
 IF PROCESS.TYPE = "I" THEN 
   CRT "What dict file do you want to import to(C to Continue)?":;INPUT ANS
  END ELSE
   CRT "What dict file do you want to export from(C to Continue)?":;INPUT ANS    
 END
 BEGIN CASE 
   CASE UPCASE(ANS) = "Q"
      CRT "Exiting...";STOP
   CASE UPCASE(ANS) = "ALL"
      FOR A = 1 TO DCOUNT(ALL.FILES,@FM) 
         FILES.TO.PROCESS<-1> = ALL.FILES<A>
      NEXT A
      ANS = ""
   CASE ANS = ""
      * Do nothing, prompt again
   CASE UPCASE(ANS) = "C"
      * Do nothing
   CASE 1
      * Check that files aren't in reserviced list
      VALID.FILE = 1
      FOR R = 1 TO DCOUNT(RESERVED.FILES,@FM)
        IF UPCASE(ANS) = UPCASE(RESERVED.FILES<R>) THEN VALID.FILE = 0 
      NEXT R 
      IF VALID.FILE THEN
         FILES.TO.PROCESS<-1> = ANS
       END ELSE
         IF PROCESS.TYPE = "I" THEN
           CRT "Importing reserved files is not allowed, skipping."
          END ELSE
           * Export will allow reserved files
           FILES.TO.PROCESS<-1> = ANS
         END
      END
      ANS = ""  
 END CASE 
 UNTIL UPCASE(ANS) = "C"
REPEAT
END; *OVERRIDE.EXPORT.IMPORT

IF DEFAULT.XML.FILE = "" THEN
  * Check on XML record to use
  IF DBMSTYPE = "UV" THEN DEFAULT.XML.FILE = "XDEMO.UV.DATAS.XML" ELSE DEFAULT.XML.FILE = "XDEMO.UDT.DATAS.XML" 
  CRT "What ":XML.DIR:" record do you want to use(<":DEFAULT.XML.FILE:">)?":;INPUT ANS
  IF UPCASE(ANS) = "" THEN XML.FILE = DEFAULT.XML.FILE
  IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP
  IF UPCASE(ANS) # "" THEN XML.FILE = ANS
END

IF PROCESS.TYPE = "I" THEN
  * Readseq xml file to look for max field count.  
  OPEN.ERROR = 0
  OPENSEQ XML.DIR, XML.FILE TO F.INCOMING.XML ELSE OPEN.ERROR = 1
  IF NOT(OPEN.ERROR) THEN
   DONE = 0;FOUND.MAXFLD.REC = 0;MAX.INCOMING.FIELD.COUNT = 0
   LOOP
     IF NOT(FOUND.MAXFLD.REC) THEN
       DONE = 0
       READSEQ SEQ.REC FROM F.INCOMING.XML ELSE DONE = 1
      END ELSE
       * Found record so next line should be max field length
       READSEQ SEQ.REC FROM F.INCOMING.XML ELSE DONE = 1
       IF NOT(DONE) THEN
          * Do something to read value in here
          SEQ.REC = TRIM(SEQ.REC)
          * Line should be <FLD1 VALUE="20" />; where 20 is max field count
          SEQ.REC = SEQ.REC[14,LEN(SEQ.REC)]
          SEQ.REC = FIELD(SEQ.REC,'"',1)
          MAX.INCOMING.FIELD.COUNT = SEQ.REC
          DONE = 1
       END       
     END
        
    UNTIL DONE
      * Look for record
      SEQ.REC = TRIM(SEQ.REC)
      IF UPCASE(SEQ.REC) = '<REC ID="':UPCASE(PROGNAME.WORK):'|MAXFLD">' THEN FOUND.MAXFLD.REC = 1 
    REPEAT
    * If record wasn't found in XML file then set to default 
    IF MAX.INCOMING.FIELD.COUNT = 0 THEN MAX.INCOMING.FIELD.COUNT = NUM.DATA.FIELDS
   END ELSE
   * If can't open file, then stop program
   CRT ""
   STOP "Error: Unable to open XML input file, ":XML.FILE:", stopping!"
  END
  CLOSESEQ F.INCOMING.XML
  
  * Create and build dictionary for work file
  GOSUB CREATE.WORK.FILE

  * Start Processing
  OPEN "",PROGNAME.WORK TO F.PROGNAME.WORK ELSE STOP "Open Error on Data Portion of Work File!"
  * Delete and recreate XML Map file
  GOSUB BUILD.XML.MAP.FILE 
  
  * Import XML file
  * Recreate record
  CRT "Importing Data from ":XML.FILE:"."
  CALL *XMLTODB(XML.FILE,XML.FROM.FILE, MAP.FILE, XMAP.FROM.FILE, STATUS)
  IF STATUS # 0 THEN
     XMLCode = "";XMLMessage = ""
     NEW.STATUS = XMLGetError(XMLCode,XMLMessage)
     IF NEW.STATUS # 0 THEN 
       CRT "Error received from XMLGetError: ":XMLCode:" ":XMLMessage
     END ELSE
       CRT "Error Result: ":STATUS
     END
  END
  FILES.TO.CD = "";* For only compiling dicts on files that exist (UV Only)
  
   * Select Work file
   CMD = "SELECT ":PROGNAME.WORK:" BY FILE_ID BY REC_ID";GOSUB RUN.CMD
   FILES.CLEARED=""; * Files that have already been cleared
   NUM.RECS.ADDED = 0
   LOOP
     READNEXT MY.ID ELSE MY.ID = ""
    UNTIL MY.ID = ""
     BAD.REC = 0;MAX.NUM.FIELDS = 0;REC = ""
     READ REC FROM F.PROGNAME.WORK, MY.ID ELSE BAD.REC = 1
     IF NOT(BAD.REC) THEN
       FILE_ID = FIELD(MY.ID,"|",1)
       REC_ID = FIELD(MY.ID,"|",2)
       VALID.FILE = 0
       * Check that file in record can be processed (ie. in the FILES.TO.PROCESS list)
       FOR FTP = 1 TO DCOUNT(FILES.TO.PROCESS,@AM)
        IF FILE_ID = FILES.TO.PROCESS<FTP> THEN VALID.FILE = 1
       NEXT FTP
        * Only add record if in FILES.TO.PROCESS list
        IF VALID.FILE THEN
          FILE.FOUND = 0
          FOR C = 1 TO DCOUNT(FILES.CLEARED,@AM)
              IF FILE_ID = FILES.CLEARED<C> THEN FILE.FOUND = 1 
          NEXT C
          IF NOT(FILE.FOUND) THEN
             CF.OPEN.ERROR = 0 
             OPEN "",FILE_ID TO F.FILE.TO.CHECK ELSE CF.OPEN.ERROR = 1
             IF NOT(CF.OPEN.ERROR) THEN          
               CRT "Processing File: ":FILE_ID
               CMD = "CLEAR.FILE ":FILE_ID;GOSUB RUN.CMD
               FILES.TO.CD<-1> = FILE_ID
               CLOSE F.FILE.TO.CHECK
              END ELSE
               FILES.TO.SKIP<-1> = FILE_ID
             END 
             FILES.CLEARED<-1> = FILE_ID
          END
          OPEN.ERROR = 0
          OPEN "",FILE_ID TO F.FILE.TO.POPULATE ELSE OPEN.ERROR = 1
          IF NOT(OPEN.ERROR) THEN
            MY.REC = ""

            LAST.LINE.WITH.DATA = 0           
            FOR M = 1 TO MAX.INCOMING.FIELD.COUNT
                MY.REC<M> = REC<M>
                IF MY.REC<M> # "" THEN LAST.LINE.WITH.DATA = M
            NEXT M
            * Add another loop to clean up any blank lines at end
            MY.NEW.REC = ""
            FOR M = 1 TO LAST.LINE.WITH.DATA
                MY.NEW.REC<M> = MY.REC<M>                
            NEXT M       
            * Go through record and convert control strings to VM and SVMs
            MY.NEW.REC.VM = "";MY.NEW.REC.SM = ""
            MY.NEW.REC.VM = CHANGE(MY.NEW.REC,"~VM~",@VM)         
            MY.NEW.REC.SM = CHANGE(MY.NEW.REC.VM,"~SM~",@SM)
            IF MY.NEW.REC.SM # "" THEN MY.NEW.REC = MY.NEW.REC.SM
            MY.NEW.REC.VM = "";MY.NEW.REC.SM = ""             
            * Now write record
            NUM.RECS.ADDED = NUM.RECS.ADDED + 1       
            WRITE MY.NEW.REC ON F.FILE.TO.POPULATE,REC_ID ON ERROR CRT "Write error on File: ":FILE_ID:", Rec ID: ":REC_ID
            CLOSE F.FILE.TO.POPULATE
            MY.REC = ""
          END;* OPEN.ERROR
        END;* VALID.FILE  
     END;*BAD.REC
   REPEAT
   CLEARSELECT 0
   * Compile dictionaries on both databases
   CRT "--------------------------------------------------------"   
   FOR X = 1 TO DCOUNT(FILES.TO.CD,@FM)
       CRT "Compiling Dictionary File: ":FILES.TO.CD<X>
       CMD = "CD ":FILES.TO.CD<X>;GOSUB RUN.CMD
   NEXT X
  * End of Import
 END ELSE
  * Export

  * Create and build dictionary for work file
  GOSUB CREATE.WORK.FILE

  * Start Processing
  OPEN "",PROGNAME.WORK TO F.PROGNAME.WORK ELSE STOP "Open Error on Data Portion of Work File!"
  NUM.FILES = DCOUNT(FILES.TO.PROCESS,@AM)
      
  * Load all dictionary records from all files into Work file
  MAX.FIELD.COUNT = 0;* Trying to dynamically build Map file
  NUM.RECS.ADDED = 0; * Record counter
  FOR F = 1 TO NUM.FILES
   BAD.FILE = 0;* Bad file flag on open
   CURRENT.FILE = FILES.TO.PROCESS<F>
   OPEN "",CURRENT.FILE TO F.CURRENT.FILE ELSE BAD.FILE = 1
   IF NOT(BAD.FILE) THEN
     * If file can be opened then start building records to go into work file
     * Filename and record is split by a pipe
     CRT "Processing File: ":CURRENT.FILE
     CMD = "SSELECT ":CURRENT.FILE;GOSUB RUN.CMD
     MY.ID = ""
     LOOP
       READNEXT MY.ID ELSE MY.ID = ""
      UNTIL MY.ID = ""
       BAD.REC = 0
       NUM.WORK.FIELDS = 0; WORK.REC = ""
       READ REC FROM F.CURRENT.FILE,MY.ID ELSE BAD.REC = 1
       IF NOT(BAD.REC) THEN
         WORK.ID = CURRENT.FILE:"|":MY.ID
         WORK.REC = REC
         WORK.REC.MAX.FIELDS = 0
         FOR B = 1 TO DCOUNT(WORK.REC,@FM)
           IF WORK.REC<B> # "" THEN WORK.REC.MAX.FIELDS = B
         NEXT B  
         * Go through record and convert VM and SVMs to control string
         WORK.REC.VM = "";WORK.REC.SM = ""
         WORK.REC.VM = CHANGE(WORK.REC,@VM,"~VM~")         
         WORK.REC.SM = CHANGE(WORK.REC.VM,@SM,"~SM~")
         IF WORK.REC.SM # "" THEN WORK.REC = WORK.REC.SM
         CONVERT '"' TO "'" IN WORK.REC;* Change double quotes to single quotes
         WORK.REC.VM = "";WORK.REC.SM = ""                
         IF WORK.REC.MAX.FIELDS > MAX.FIELD.COUNT THEN MAX.FIELD.COUNT = WORK.REC.MAX.FIELDS;* Set maximum # of records rather than use hard coded parameter
         WRITE WORK.REC ON F.PROGNAME.WORK,WORK.ID ON ERROR CRT "Error writing to work file, Processing File: ":CURRENT.FILE:", ID: ":MY.ID
         NUM.RECS.ADDED = NUM.RECS.ADDED + 1
       END
     REPEAT
     CLEARSELECT 0
     CLOSE F.CURRENT.FILE ON ERROR NULL
   END ELSE
     FILES.TO.SKIP<-1> = CURRENT.FILE
   END  
  NEXT F 
  * Write record out to work file with Max field count, so it can be picked up on import
  REC = "";REC<1> = MAX.FIELD.COUNT
  REC.ID = PROGNAME.WORK:"|MAXFLD"
  WRITE REC ON F.PROGNAME.WORK,REC.ID ON ERROR NULL
  REC = "";REC.ID = ""
  * Delete and recreate XML Map file
  GOSUB BUILD.XML.MAP.FILE
  CMD = "DELETE ":XML.DIR:" ":XML.FILE;GOSUB RUN.CMD;* Delete XML file first, so no old data remains

  CRT "Exporting Data to ":XML.FILE:"." 
  GOSUB REPLACEMENT.DBTOXML;*Replacement for DBTOXML
END
CLOSE F.PROGNAME.WORK
CRT "# of records processed: ":NUM.RECS.ADDED
IF NOT(KEEP.WORK.FILE) THEN
 * Delete work file if not using -K option
  IF DBMSTYPE = "UV" THEN
     CMD = "DELETE.FILE ":PROGNAME.WORK;GOSUB RUN.CMD
   END ELSE
     CMD = "delete.file ":PROGNAME.WORK:" FORCE";GOSUB RUN.CMD
  END
END 
IF FILES.TO.SKIP # "" THEN
  CRT ""
  CRT "Files skipped during processing:"
  FOR X = 1 TO DCOUNT(FILES.TO.SKIP,@FM)
    CRT " ":FILES.TO.SKIP<X>
  NEXT X
  CRT ""
END
CRT "Finished."
CLOSE F.VOC
STOP

REPLACEMENT.DBTOXML:
STATUS = XMAPCreate(MAP.FILE, XMAP.FROM.FILE, Xfile)
IF STATUS = XML.ERROR THEN
    STATUS = XMLERROR(errmsg)
    CRT "Error when call XMAPCreate(): ":errmsg
    RETURN
END

* Set Cascade mode on
STATUS = XMAPSetOption(Xfile, 1, 1)
IF STATUS = XML.ERROR THEN
    PRINT "Error when set the options."
    RETURN
END

EXECUTE "SSELECT ":PROGNAME.WORK:" TO 1" CAPTURING QueryOut
READLIST IDLIST FROM 1 ELSE IDLIST = ""
NO_OF_IDS = DCOUNT(IDLIST, @FM)
FOR I = 1 TO NO_OF_IDS
    ID = IDLIST<I>
    READ rec FROM F.PROGNAME.WORK, ID THEN
        newrec = ID:@FM:rec
        Record = newrec
        STATUS = XMAPAppendRec(Xfile, PROGNAME.WORK, newrec)
        IF STATUS = XML.ERROR THEN
            STATUS = XMLERROR(errmsg)
            CRT "Error when writing the record into the XMAP dataset."
            RETURN
        END
    END
NEXT I

STATUS = XMAPToXMLDoc(Xfile, XML.FILE, XML.TO.FILE)
IF STATUS = XML.ERROR THEN
    STATUS = XMLERROR(errmsg)
    CRT "Error when call XMAPToXMLDoc(): ":errmsg
    STATUS = XML.ERROR
    RETURN
END
STATUS = XMAPClose(Xfile)
IF STATUS = XML.ERROR THEN
    STATUS = XMLERROR(errmsg)
    CRT "Error when call XMAPClose(): ":errmsg
    STATUS = XML.ERROR
    RETURN
END    
CLEARSELECT 1
RETURN

BUILD.XML.MAP.FILE:
  * Deletes & recreates Map file for XML
  CMD = "DELETE ":XML.DIR:" ":MAP.FILE;GOSUB RUN.CMD
  REC = ""; REC.ID = MAP.FILE  
  REC<-1> = '<?xml version="1.0" ?>'
  REC<-1> = '<U2XMAP version="1.0" Name="':MAP.FILE:'">'
  REC<-1> = '    <OPTIONS>'
  REC<-1> = '        <DateFormat Format="XMLFormat" />'
  REC<-1> = '        <IgnoreNameSpace/>'
  REC<-1> = '    </OPTIONS>'
  REC<-1> = '<TABLECLASSMAP MapName="':MAP.FILE:'" StartNode="XDEMO_DATAS/REC" TableName="':PROGNAME.WORK:'">'
  REC<-1> = '<!-- ID Field -->'
  REC<-1> = '        <ColumnMap Node="@ID" Column="@ID"/>'
  REC<-1> = '<!-- Items/Item -->'  
  NUM.FIELDS.TO.MAP = 0
  * Set Field count to max number of records
  IF PROCESS.TYPE = "I" THEN 
    * Import uses MAX.INCOMING.FIELD.COUNT, Export uses MAX.FIELD.COUNT
    IF MAX.INCOMING.FIELD.COUNT > 0 THEN NUM.FIELDS.TO.MAP = MAX.INCOMING.FIELD.COUNT ELSE NUM.FIELDS.TO.MAP = NUM.DATA.FIELDS
   END ELSE
    IF MAX.FIELD.COUNT > 0 THEN NUM.FIELDS.TO.MAP = MAX.FIELD.COUNT ELSE NUM.FIELDS.TO.MAP = NUM.DATA.FIELDS
  END 
  FOR Y = 1 TO NUM.FIELDS.TO.MAP
    REC<-1> = '        <ColumnMap Node="FLD':Y:', @VALUE" Column="FLD':Y:'"/>'
  NEXT Y     
  REC<-1> = '</TABLECLASSMAP>'
  REC<-1> = '</U2XMAP>'  
  OPEN "",XML.DIR TO F.XML.DIR ELSE STOP "Error opening ":XML.DIR:" Directory!"
  WRITE REC ON F.XML.DIR,MAP.FILE ON ERROR STOP "Error writing map file to ":XML.DIR:" Directory!"
  CLOSE F.XML.DIR
RETURN



CREATE.WORK.FILE: 
 *Delete and recreate work file
 IF PROGNAME.WORK = "" THEN
  CRT "This program's main work variable is not defined, can not continue, stopping!";STOP
 END
 OPEN "",PROGNAME.WORK TO OPEN.TEST THEN FILE.EXISTS = 1 ELSE FILE.EXISTS = 0
 IF FILE.EXISTS THEN
     CLOSE OPEN.TEST 
     IF DBMSTYPE = "UV" THEN
        CMD = "DELETE.FILE ":PROGNAME.WORK;GOSUB RUN.CMD
      END ELSE
        CMD = "DELETE.FILE ":PROGNAME.WORK:" FORCE";GOSUB RUN.CMD
     END
   END ELSE
    * Delete record if it exists
    CMD = "DELETE VOC ":PROGNAME.WORK;GOSUB RUN.CMD;* Delete record even if file doesn't exist
    DELETE.FNAME = PROGNAME.WORK
    GOSUB DELETE.NONEXISTING.FILE
 END
 IF DBMSTYPE = "UV" THEN
  IF PICK.STYLE = 0 THEN
    * Ideal
    CMD = "CREATE.FILE ":PROGNAME.WORK:" 18 347 8";GOSUB RUN.CMD
   END ELSE
    * Pick
    CMD = "CREATE.FILE ":PROGNAME.WORK:" 1,2,3 347,8,18";GOSUB RUN.CMD    
  END     
 END ELSE
  CMD = "create.file ":PROGNAME.WORK:" 241,8";GOSUB RUN.CMD
 END

 OPEN "DICT",PROGNAME.WORK TO F.DICT.PROGNAME.WORK ELSE STOP "Open Error on Work File!"
 REC = "";REC.ID = ""
 FOR X = 1 TO NUM.DATA.FIELDS
   REC.ID = "FLD":X
   REC<1> = "D";REC<2> = X;REC<4> = "Field #":X;REC<5> = "10L";REC<6> = "S"
   WRITE REC ON F.DICT.PROGNAME.WORK,REC.ID ON ERROR STOP "Write Error on Work File, ID: ":REC.ID:"!" 
 NEXT X
  * Record @ID  
  REC = "";REC.ID = ""
  REC.ID = "@ID"
  REC<1> = "D";REC<2> = 0;REC<4> = "@ID";REC<5>= "40L";REC<6> = "S"
  WRITE REC ON F.DICT.PROGNAME.WORK,REC.ID ON ERROR STOP "Write Error on Work File, ID: ":REC.ID:"!" 
  * Add Virtual fields for Original Filename and Record ID
  IF DBMSTYPE = "UV" THEN  DICT.FIELD.TYPE = "I" ELSE DICT.FIELD.TYPE = "V"
  REC = "";REC.ID = ""
  REC.ID = "FILE_ID"
  REC<1> = DICT.FIELD.TYPE;REC<2>='FIELD(@ID,"|",1)';REC<4> = "Filename";REC<5>= "30L";REC<6> = "S"
  WRITE REC ON F.DICT.PROGNAME.WORK,REC.ID ON ERROR STOP "Write Error on Work File, ID: ":REC.ID:"!"   
  REC = "";REC.ID = ""  
  REC.ID = "REC_ID"
  REC<1> = DICT.FIELD.TYPE;REC<2>='FIELD(@ID,"|",2)';REC<4> = "Rec_ID";REC<5>= "10L";REC<6> = "S"
  WRITE REC ON F.DICT.PROGNAME.WORK,REC.ID ON ERROR STOP "Write Error on Work File, ID: ":REC.ID:"!"  
  REC = "";REC.ID = ""
 CLOSE F.DICT.PROGNAME.WORK
  * Must compile dict before using it
  CMD = "CD ":PROGNAME.WORK;GOSUB RUN.CMD
RETURN

DELETE.NONEXISTING.FILE:
    * Delete record if it exists, uses DELETE.FNAME record
      UFD.REC = ""
      IF DBMSTYPE = "UV" THEN UFD.REC<1> = "F" ELSE UFD.REC<1> = "DIR"
      UFD.REC<2> = ".";UFD.REC<3> = "D_U2BP"
      WRITE UFD.REC ON F.VOC,"XDEMO.UFD" ON ERROR UFD.REC = ""
      UFD.REC = ""
      READ UFD.REC FROM F.VOC,"XDEMO.UFD" ELSE UFD.REC = ""      
      IF UFD.REC # "" THEN
         CMD = "DELETE XDEMO.UFD ":DELETE.FNAME;GOSUB RUN.CMD;* Delete record via UFD if having further problems
         CMD = "DELETE XDEMO.UFD D_":DELETE.FNAME;GOSUB RUN.CMD;* Delete record via UFD if having further problems            
      END  
      CMD = "DELETE VOC XDEMO.UFD";GOSUB RUN.CMD
      DELETE.FNAME = ""
RETURN

INITIALIZATION:
   PROGNAME = "BUILD.XDEMO.DATAS"; * Displayed on Program Run
   PROGNAME.WORK = PROGNAME:".WORK"
   
   MAX.FIELD.COUNT = 0; * Dynamic version of NUM.DATA.FIELDS (will not be used if < NUM.DATA.FIELDS)
   NUM.DATA.FIELDS = 250; *Number of lines to read from/to dictionary records
   MAP.FILE = PROGNAME:".MAP";* XML Map file
   PROMPT ""
   STATUS = ""
   DEFAULT.XML.FILE = ""; * Will get set either at command line or via prompt
   DEFAULT.XML.FILE.UV = 'XDEMO.UV.DATAS.XML'; * If I/E otions used on command line but not X then default xml file
   DEFAULT.XML.FILE.UDT = 'XDEMO.UDT.DATAS.XML'
   DEFAULT.XML.DIR = ""; * Not used but set anyway
   XML.DIR = ""; * Set after database check or via CLO's.
   OVERRIDE.EXPORT.IMPORT = 0; * 0 will prompt user, 1 will be given at command line
   ANS = ""; DEFAULT.ANS = "";MEMO = ""
   JUNK = @(0,0); * Fix for 'Press Any Key'
   RUN.SENTENCE = @SENTENCE; * Must be saved before GET.DB.INFO is run
   KEEP.WORK.FILE = 0;* Deletes Work file at end of program execution
   SKIP.XDEMO.CHECK = 0;* Default is to check for a XDEMO record since it clears files
   DEBUG.FLAG = 0;* Enabled on -DEBUG command line, shows output from EXECUTE CMDs   
   
   * Arrays of Filenames  
   RESERVED.FILES=""
   RESERVED.FILES<-1>="VOC"
   RESERVED.FILES<-1>="VOCLIB"
   RESERVED.FILES<-1>="NEWACC"
   RESERVED.FILES<-1>="APP.PROGS"
   RESERVED.FILES<-1>="BASIC.HELP"
   RESERVED.FILES<-1>="BCI.HELP"
   RESERVED.FILES<-1>="BP"
   RESERVED.FILES<-1>="BP.O"
   RESERVED.FILES<-1>="U2BP"
   RESERVED.FILES<-1>="U2BP.O"
   RESERVED.FILES<-1>="DICT.DICT"
   RESERVED.FILES<-1>="DICT.PICK"
   RESERVED.FILES<-1>="ERRMSG"
   RESERVED.FILES<-1>="GLOBAL.CATDIR"
   RESERVED.FILES<-1>="PTERM.FILE"
   RESERVED.FILES<-1>="SYS.HELP"
   RESERVED.FILES<-1>="SYS.MESSAGE"
   RESERVED.FILES<-1>="UNIVERSE.INCLUDE"
   RESERVED.FILES<-1>="UNIVERSE.STAT.FILE"
   RESERVED.FILES<-1>="UNIVERSE.VOCLIB"
   RESERVED.FILES<-1>="UV.SAVEDLISTS"
   
   * All XDEMO Files (if using ALL option)
   ALL.FILES = ""
   ALL.FILES<-1> = "LOCATIONS"
   ALL.FILES<-1> = "MEMBERS"
   ALL.FILES<-1> = "PRODUCT.REVIEW"
   ALL.FILES<-1> = "PRODUCTS"
   ALL.FILES<-1> = "REGION"
   ALL.FILES<-1> = "RENTAL.DETAILS"
   ALL.FILES<-1> = "STATES"   
   ALL.FILES<-1> = "TRANSACTION.ACCUM"
   FILES.TO.SKIP = "";* To Display skipped files at end   
   FILES.TO.PROCESS = ""; * Files to work on during program  
   
   OPEN "","VOC" TO F.VOC ELSE STOP "Open VOC Error in ":PROGNAME:"."  
RETURN


PARSE.COMMAND.LINE:
* Check Command line options
CONVERT " " TO @FM IN RUN.SENTENCE
* RUN U2BP PROGNAME CLO1 (4th) or PROGNAME CLO1 (2nd)
IF UPCASE(RUN.SENTENCE<1>) = "RUN" THEN START.POSITION = 4 ELSE START.POSITION = 2
CLO.SENTENCE = ""; * Short for Command Line Options
PROCESS.TYPE = ""
FOR X = START.POSITION TO DCOUNT(RUN.SENTENCE, @FM)
  CLO.SENTENCE<-1> = RUN.SENTENCE<X>
NEXT X
* Now parse through CLOs to get parameters for program
CHECK.NEXT.OPTION = 1
FILES.TO.PROCESS = ""; * Clear first
IF CLO.SENTENCE # "" THEN CRT "";CRT "Validating Command Line Options..."
FOR X = 1 TO DCOUNT(CLO.SENTENCE, @FM)
  MY.PARAM = CLO.SENTENCE<X>
  MY.PARAM2 = CLO.SENTENCE<X+1>
  IF CHECK.NEXT.OPTION THEN 
    BEGIN CASE
      * Command line otions
     CASE UPCASE(MY.PARAM) = "-H" OR UPCASE(MY.PARAM) = "-HELP"
       * Help syntax
       GOSUB SHOW.SYNTAX
       STOP  
     CASE UPCASE(MY.PARAM) = "-V" OR UPCASE(MY.PARAM) = "-VER" OR UPCASE(MY.PARAM) = "-VERSION"
       * Version syntax
       CRT "Program Version: ":PROGVERSION
       CRT "Program Date: ":PROGDATE
       STOP
     CASE UPCASE(MY.PARAM) = "-DEBUG"
       DEBUG.FLAG = 1  
       CHECK.NEXT.OPTION = 1          
     CASE UPCASE(MY.PARAM) = "-K" OR UPCASE(MY.PARAM) = "-KEEP"
       KEEP.WORK.FILE = 1  
       CHECK.NEXT.OPTION = 1         
     CASE UPCASE(MY.PARAM) = "-N"
       * Default Number of fields override
       IF NUM(MY.PARAM2) THEN 
          NUM.DATA.FIELDS = MY.PARAM2
          CRT "Overriding Max Field count to: ":MY.PARAM2          
        END ELSE
          CRT "# of fields value is not numeric, keeping at default."
       END
       CHECK.NEXT.OPTION = 0;* Skip Next option
     CASE UPCASE(MY.PARAM) = "-E" OR UPCASE(MY.PARAM) = "-EXPORT" OR UPCASE(MY.PARAM) = "-I" OR UPCASE(MY.PARAM) = "-IMPORT"
       * Import & Export option
       BEGIN CASE
         CASE PROCESS.TYPE = "E"
          IF UPCASE(MY.PARAM) = "-I" OR UPCASE(MY.PARAM) = "-IMPORT" THEN
            CRT "Export and Import options can not be mixed. Stopping."
            STOP
          END  
         CASE PROCESS.TYPE = "I"
          IF UPCASE(MY.PARAM) = "-E" OR UPCASE(MY.PARAM) = "-EXPORT" THEN
           CRT "Export and Import options can not be mixed. Stopping."
           STOP
          END
         CASE 1            
       END CASE 
       IF UPCASE(MY.PARAM) = "-E" OR UPCASE(MY.PARAM) = "-EXPORT" THEN PROCESS.TYPE = "E" ELSE PROCESS.TYPE = "I"
       IF UPCASE(MY.PARAM2) = "ALL" THEN
         FOR A = 1 TO DCOUNT(ALL.FILES,@FM) 
           FILES.TO.PROCESS<-1> = ALL.FILES<A>
         NEXT A
       END ELSE
        VALID.FILE = 1
        * Check if file can be opened
        OPEN "",MY.PARAM2 TO F.CURRENT.FILE ELSE VALID.FILE = 0
        CLOSE F.CURRENT.FILE
        * If file can be opened then check if files aren't in reserved list
        IF VALID.FILE THEN
           FOR R = 1 TO DCOUNT(RESERVED.FILES,@FM)
            IF UPCASE(MY.PARAM2) = UPCASE(RESERVED.FILES<R>) THEN VALID.FILE = 0 
           NEXT R
           * Second valid check to add to processing list.  
           IF VALID.FILE THEN
              FILES.TO.PROCESS<-1> = MY.PARAM2
             END ELSE
              IF PROCESS.TYPE = "I" THEN
                CRT "Importing reserved files is not allowed, skipping."
               END ELSE
                * Export will allow reserved files
                FILES.TO.PROCESS<-1> = MY.PARAM2
              END
           END           
          END ELSE
           CRT "The file ":MY.PARAM2:" is invalid, skipping."
        END

       END  
       IF FILES.TO.PROCESS # "" THEN OVERRIDE.EXPORT.IMPORT = 1
       CHECK.NEXT.OPTION = 0;* Skip Next option  
     CASE UPCASE(MY.PARAM) = "-SX"
       * Skip XDEMO account check
       CHECK.NEXT.OPTION = 1     
       SKIP.XDEMO.CHECK = 1; *Skips check for XDEMO record, since program clears files
     CASE UPCASE(MY.PARAM) = "-X"
       * XML File to use
       DEFAULT.XML.FILE = MY.PARAM2
       XML.FILE = DEFAULT.XML.FILE
       CHECK.NEXT.OPTION = 0;* Skip Next option                    
      CASE 1  
        * Do Nothing
    END CASE
   END ELSE
    * Option was taken care of in last loop
    CHECK.NEXT.OPTION = 1
  END
NEXT X
* Do XDEMO record check here
IF NOT(SKIP.XDEMO.CHECK) THEN
  FOUND.REC = 1
  READ REC FROM F.VOC,"XDEMO.VERSION" ELSE FOUND.REC = 0
  IF NOT(FOUND.REC) THEN
    CRT "Stopping program, need to be logged into XDEMO account."
    STOP
  END
  REC = ""
END

IF PROCESS.TYPE # "" AND DEFAULT.XML.FILE = "" THEN
  * Allows for X option to be skipped, if E/I options were used
  IF DBMSTYPE = "UV" THEN 
     DEFAULT.XML.FILE = DEFAULT.XML.FILE.UV
     XML.FILE = DEFAULT.XML.FILE 
     CRT "Defaulting XML file to: ":DEFAULT.XML.FILE
   END ELSE 
     DEFAULT.XML.FILE = DEFAULT.XML.FILE.UDT
     XML.FILE = DEFAULT.XML.FILE
     CRT "Defaulting XML file to: ":DEFAULT.XML.FILE     
  END   
END
IF FILES.TO.PROCESS # "XDEMO.CONTROL" THEN
 IF PROCESS.TYPE = "E" THEN
   CRT "Exporting these files to XML: "
 END ELSE
   CRT "Importing from XML to these files:"
 END
 FOR D = 1 TO DCOUNT(FILES.TO.PROCESS,@FM)
    CRT "  ":FILES.TO.PROCESS<D>
 NEXT D
END
IF CLO.SENTENCE # "" THEN
   CRT "------------------------------------------------------"
END
CRT ""
*CRT @(-1); *Clear screen only after checking command line
RETURN

SHOW.SYNTAX:
    CRT "This program can export or import XDEMO Dictionaries to & from XML files."
    CRT ""
    CRT "Available Options:"
    CRT " (No Options)      <-- Standard Method"
    CRT " -DEBUG            <-- Executes commands without hiding output"    
    CRT " -E FNAME          <-- Export FNAME Dictionary from given XML file"
    CRT " -H                <-- Gives this info"
    CRT " -I FNAME          <-- Imports FNAME Dictionary from given XML file"
    CRT " -K(EEP)           <-- Keep Work file at end of program"
    CRT " -N #              <-- Overrides default of ":NUM.DATA.FIELDS:" fields" 
    CRT " -SX               <-- Skips check for XDEMO Account"
    CRT " -X XML.FILENAME   <-- XML File to use during program"
    CRT " -V                <-- Gives version of program"
    CRT ""    
    CRT "Options other than -H & -V can be combined. You can specify '-E ALL' or '-I ALL'"
    CRT "to export or import default XDEMO files.  This includes: LOCATIONS, MEMBERS,"
    CRT "PRODUCT.REVIEW, PRODUCTS, REGION, RENTAL.DETAILS, STATES and TRANSACTION.ACCUM."
    CRT "If the -X option is not specified but -E or -I options were, then the default "
    CRT "XML file will be used.  This will be '":DEFAULT.XML.FILE.UDT:"' for UniData "
    CRT "or '":DEFAULT.XML.FILE.UV:"' for UniVerse." 
    CRT ""
    STOP
RETURN

GET.ANS: 
CORRECT.ANS = ""
LOOP
  ANS = ""
  CRT MEMO:;INPUT ANS
  ANS = UPCASE(ANS)
  IF ANS = "" THEN ANS = UPCASE(DEFAULT.ANS)
  IF UPCASE(ANS) = "Q" THEN CRT "Exiting...";STOP ;* Always allow to quit
  VALID.ANS = 0
  FOR V = 1 TO LEN(VALID.OPTIONS)
    IF UPCASE(ANS) = UPCASE(ANS[V,1]) THEN 
       VALID.ANS = 1
       CORRECT.ANS = UPCASE(ANS)
    END
  NEXT V
UNTIL VALID.ANS
REPEAT
IF CORRECT.ANS # "" THEN ANS = CORRECT.ANS
DEFAULT.ANS = "";MEMO = ""
RETURN

RUN.CMD:
  * Got tired of taking out capturing text during testing so added flag
  IF CMD # "" THEN
    IF DEBUG.FLAG THEN
      EXECUTE CMD
     END ELSE
      EXECUTE CMD CAPTURING NULL
    END
   END ELSE
    CRT "Command parameter was not set, stopping.";STOP
  END
  CMD = "";*Should always be set to something before next call to this subroutine
RETURN

GET.DATABASE.INFO:
 *Details come from Brian's GET.DB.INFO subroutine

* DB.INFO.RTN return values are:
* 0 for successful run
* 1 for unsuccessful run of subroutine, it means DBMSTYPE can't be found

* General Info
* SYSTEM(32) needs to be passed to the subroutine, to get basictype used during main program execution and not this subroutine.
* PICK.STYLE: SET TO 1 IF ECLTYPE P, OR IF UV SYSTEM(1001) IS 2, 8 OR 16; DEFAULT SETTING
* PICK.STYLE: SET TO 0 IF ECLTYPE U, OR IF UV SYSTEM(1001) IS 1, 4 OR 64
* FLAVOR values: IDEAL, IN2, INFO, MICRO, OTHER, PICK, PIOPEN, REALITY, UDT   (OTHER only used if can't find flavor)
* DBMSTYPE values: UDT, UV
* ECLTYPE: P, U, or empty for UV DBMSTYPE
* BASICTYPE: P, U, M or R for UDT and empty for UV DBMSTYPE
* OSTYPE: 0 for Unix and 1 for Windows
 
DB.INFO.RTN = 0
VERSION = "";MAJ.VERSION = "";MIN.VERSION = "";PNT.VERSION = ""
SYS9010 = UPCASE(SYSTEM(9010))[1,2]
SYS32 = SYSTEM(32)
BEGIN CASE
  CASE SYS9010 = "UV"
     DBMSTYPE = "UV"
  CASE SYS9010 = "UD"
     DBMSTYPE = "UDT"
  CASE 1
     IF LEN(SYS32) = 1 THEN DBMSTYPE = "UDT" ELSE DBMSTYPE = "UV"
END CASE
BEGIN CASE
  CASE DBMSTYPE = "UDT"
    * Check if called directly first.
    IF SYSTEM(17) = 0; *Should be 1 or 2, when called as subroutine
     THEN
      CRT "Can not call this program directly!"
      RETURN
    END
    BASICTYPE = UPCASE(SYS32) 
    BEGIN CASE
      CASE SYS32 = "p"
        FLAVOR = "PICK" 
      CASE SYS32 = "u" 
        FLAVOR = "UDT"
      CASE SYS32 = "r"
        FLAVOR = "REALITY"    
      CASE SYS32 = "m"
        FLAVOR = "MICRO"
      CASE 1
        FLAVOR = "OTHER"
    END CASE;   *CASE SYS32
      EXECUTE "ECLTYPE" CAPTURING ECLTEMP
      FINDSTR "ON" IN ECLTEMP SETTING FM, VM, SM THEN ECLTYPE = "P" ELSE ECLTYPE = "U"      
      IF ECLTYPE = "P" THEN
        PICK.STYLE = 1
        SELECT.VOC = 'SSELECT VOC WITH F1 = "F]" OR WITH F1 = "f]" OR WITH F1 = "DIR]" OR WITH F1 = "dir]" OR WITH F1 = "LF]" OR WITH F1 = "lf]" OR WITH F1 = "LD]" OR WITH F1 = "ld]" USING DICT VOC'
      END ELSE
        PICK.STYLE = 0
        SELECT.VOC = 'SSELECT VOC WITH F1 LIKE "F..." OR WITH F1 LIKE "f..." OR WITH F1 LIKE "DIR..." OR WITH F1 LIKE "dir..." OR WITH F1 LIKE "LF..." OR WITH F1 LIKE "lf..." OR WITH F1 LIKE "LD..." OR WITH F1 LIKE "ld..." USING DICT VOC'
      END
  
    * UDT.OPTIONS 16: ONLY DISPLAYS TOTAL # OF RECS DELETED ON DELETE VOC
    EXECUTE "UDT.OPTIONS 16 ON" 
    * Build Version value
    EXECUTE "VERSION" CAPTURING VERTEMP
    VER.LINE = DCOUNT(VERTEMP,CHAR(254)) - 1
    LEN.VERSION = LEN(VERTEMP<VER.LINE>) 
    MAJ.VERSION = VERTEMP<VER.LINE>[1,1]
    MIN.VERSION = VERTEMP<VER.LINE>[2,1]
    PNT.VERSION = ""
    PNT2.VERSION = ""
    FOR X = 3 TO LEN.VERSION
      IF NUM(VERTEMP<VER.LINE>[X,1]) THEN
        PNT.VERSION := VERTEMP<VER.LINE>[X,1]
       END ELSE
        PNT2.VERSION := UPCASE(VERTEMP<VER.LINE>[X,1])
      END  
    NEXT X
    IF PNT2.VERSION = "" THEN
     VERSION = MAJ.VERSION:".":MIN.VERSION:".":PNT.VERSION
    END ELSE
     VERSION = MAJ.VERSION:".":MIN.VERSION:".X.":PNT2.VERSION     
    END
   * OSTYPE
   IF UPCASE(SYSTEM(33)) = "UNIX" THEN OSTYPE = 0 ELSE OSTYPE = 1
** END OF DBMSTYPE = "UDT"

  CASE DBMSTYPE = "UV"
    BASICTYPE = ""
    ECLTYPE = ""
    IF UPCASE(FIELD(@SENTENCE, " ",1)) = "RUN" AND UPCASE(FIELD(@SENTENCE, " ",1)) = "GET.DB.INFO" THEN
       CRT "Can not call this program directly!"
       RETURN    
     END
      BEGIN CASE 
        CASE SYSTEM(1001) = 1
          PICK.STYLE = 0
          FLAVOR = "IDEAL"
        CASE SYSTEM(1001) = 4
          PICK.STYLE = 0
          FLAVOR = "INFO"
        CASE SYSTEM(1001) = 64
          PICK.STYLE = 0
          FLAVOR = "PIOPEN"
        CASE SYSTEM(1001) = 2
          PICK.STYLE = 1
          FLAVOR = "PICK"
        CASE SYSTEM(1001) = 8
          PICK.STYLE = 1
          FLAVOR = "REALITY"
        CASE SYSTEM(1001) = 16
          PICK.STYLE = 1
          FLAVOR = "IN2"
        CASE 1
          PICK.STYLE = 1
      END CASE;    *CASE SYSTEM(1001)
      IF PICK.STYLE = 1 THEN 
        SELECT.VOC = 'SSELECT VOC WITH F1 = "F]" OR WITH F1 = "Q"'
      END ELSE
        SELECT.VOC = 'SSELECT VOC WITH F1 LIKE "F..." OR WITH F1 = "Q"'  
      END
   * Get Version
   EXECUTE "CT VOC RELLEVEL" CAPTURING VERTEMP
   VERSION = FIELD(VERTEMP<7>," ",2) 
   MAJ.VERSION = FIELD(VERSION,".",1)
   MIN.VERSION = FIELD(VERSION,".",2)
   PNT.VERSION = FIELD(VERSION,".",3)
   * OSTYPE
   OSTYPE = SYSTEM(91)  
** END OF DBMSTYPE = "UV"

  CASE 1
    DB.INFO.RTN = 1
    DB.INFO.REC = ""
END CASE;    *CASE DBMSTYPE
RETURN


