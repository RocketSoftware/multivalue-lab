*$options DEFAULT
subroutine CalculateStandardDeviation(Result,Times,Iterations)
******************************************************************************
*
*     Calculate Standard Deviation
*
*     Module %M%    Version  %I%   Date  %H%
*
*	IBM Confidential
*	OCO Source Materials
*	Copyright (C) IBM Corp.  2005
*
*     (c) Copyright 2005 IBM Corp. - All Rights Reserved
*     This is unpublished proprietary source code of IBM Corp.
*     The copyright notice above does not evidence any actual or intended
*     publication of such source code.
*
*******************************************************************************
*
*     Maintenence log - insert most recent change descriptions at top
*
*     Date.... ECase WHO Description........................................
*     02/02/05       MAB Created Module
*
*******************************************************************************

* Return an unbiased Standard Deviation from the sample 

call CalculateMean(Mean,Times,Iterations,MeanIterations)
if len(Mean) = 0 then
	Result = ""
	return
end

* Reset for remove
Times      = Times
Iterations = Iterations

SampleCount = 0
TotalDistanceSquared = 0
loop
	Numerator   = remove(Times,DelimiterNumerator)
	Denominator = remove(Iterations,DelimiterDenominator)
	if DelimiterNumerator # DelimiterDenominator then
		Result = ""
		return
	end
	if len(Numerator) and len(Denominator) and num(Numerator) and num(Denominator) and Denominator>0 then
		Average = Numerator / Denominator
		SampleCount += 1
		TotalDistanceSquared += (Average-Mean)*(Average-Mean)
	end
while DelimiterNumerator
repeat
* The less than part may result from two samples, but one was too short in time
* and we cannot calculate a mean for that instance, leaving only one real 
* sample for caluclating the variance.
if SampleCount <= 1 then
	* We have calculated the sample mean from the underlying sample,
	* removing one degree of freedom.  With only one sample, we cannot
	* also caluclate a sample variance or standard deviation
	Result = ""
	return
end

Result = sqrt(TotalDistanceSquared / (SampleCount-1))
return
