program Build
******************************************************************************
*
*     Construct tests from Scaffold and write them into TestUnderTest
*
*     Module %M%    Version  %I%   Date  %H%
*
*	IBM Confidential
*	OCO Source Materials
*	Copyright (C) IBM Corp.  2005
*
*     (c) Copyright 2005 IBM Corp. - All Rights Reserved
*     This is unpublished proprietary source code of IBM Corp.
*     The copyright notice above does not evidence any actual or intended
*     publication of such source code.
*
*******************************************************************************
*
*     Maintenence log - insert most recent change descriptions at top
*
*     Date.... ECase WHO Description........................................
*	
*     02/02/05       MAB Created Module
*
*******************************************************************************

* $options DEFAULT

$include Include OSSpecific

$include IncludeFile FailureEquates

$include IncludeFile Scaffold_Common
$include IncludeFile Scaffold_Layout
$include IncludeFile Scaffold_Open
$include IncludeFile TestUnderTest_Common
* $include IncludeFile TestUnderTest_Layout
$include IncludeFile TestUnderTest_Open

gosub Initialize

equ MAX_PARTS to 4
dim Parts(MAX_PARTS)
* Parts(1) test setup
* Parts(2) test inner loop, subject to code replication 
* Parts(3) test teardown
* Parts(4) test out-of-codepath includes and gosub routines.

CodeIntroduction = @am : Copyright
*CodeIntroduction<-1> = "$options TIME.MILLISECOND"
CodeIntroduction<-1> = "StartWall = 0; * In case we do not finish"
CodeIntroduction<-1> = "StartCpu = 0;  * In case we do not finish"
CodeIntroduction<-1> = "EndWall = 0;   * In case we do not finish"
CodeIntroduction<-1> = "EndCpu = 0;    * In case we do not finish"
CodeIntroduction<-1> = ""
LoopInitialization     = @am
LoopInitialization<-1> = "StartWall = system(12)"
LoopInitialization<-1> = "StartCpu  = system( 9)"
LoopInitialization<-1> = "for IterationsNdx = 1 to Iterations"

LoopFinish     = @am
LoopFinish<-1> = "next IterationsNdx"
LoopFinish<-1> = "EndCpu  = system( 9)"
LoopFinish<-1> = "EndWall = system(12)"
Complete     = @am
Complete<-1> = "return"
Complete<-1> = "ErrorExit:"
Complete<-1> = "**********"
Complete<-1> = "Print Msg"
Complete<-1> = "Iterations = 0; * Cause loop control to terminate"
Complete<-1> = "return"
Complete<-1> = ""

dim Comline(20)
matparse Comline from @sentence, ' '
No.Tokens = inmat()

if system(11) then
	gosub BuildFromSelectList
end else
	if No.Tokens > 3 then
		pos = 4
		loop while No.Tokens - pos ge 0
			TestId = Comline(pos)
			gosub BuildTestUnderTestEntry
			pos = pos + 1
		repeat
	end else
		select fScaffold
		gosub BuildFromSelectList
	end
end

AllDone:
********
print "Done."
return

BuildFromSelectList:
********************
loop
while readnext TestId
	gosub BuildTestUnderTestEntry
repeat
return

MakeTestName:
*************
TestNumber = TestId
gosub FormatTestNumber
TestId = TestNumber
*if num(TestId) then
*	TestId = fmt(TestId,"R%%%%")
*end
return

BuildTestUnderTestEntry:
************************
gosub MakeTestName
mat Parts = ""
ScaffoldId = TestId
gosub ReadScaffold
if Failure then
	call DisplayMessage(Msg)
	return
end
LineCount = dcount(ScaffoldRecord,@am)
Section = 1
for LineNdx = SCAFFOLD_CODE_SECTION to LineCount
	Line = ScaffoldRecord<LineNdx>
	if Line[1,1] = ":" then
		Section += 1
		if Section > MAX_PARTS then
			Failure = 1
			Msg = "Internal section error on test: ":TestId
			call DisplayMessage(Msg)
			return
		end
	end else
		Parts(Section) := @am : Line
	end
next LineNdx

* Deault value for numeric Id is that it is a TestUnderTest.
* Otherwise we assume it is to be a supporting routine.
TestOrRoutine = upcase(trimf(ScaffoldRecord<SCAFFOLD_TEST_ROUTINE>))
begin case
case len(TestOrRoutine) = 0
	* Default value is "Test"
	if num(TestId) then
		TestOrRoutine = "T"
	end else
		TestOrRoutine = "R"
	end
case TestOrRoutine = "T"
case TestOrRoutine = "R"
case 1
	Msg = "Valid Test/Routine entries are 'T' and 'R'"
	call DisplayMessage(Msg)
	return
end case
TestUnderTestId = TestId
gosub ReaduTestUnderTest
if Failure then
	call DisplayMessage(Msg)
	return
end
print TestId:" ":
if num(TestId) then
	gosub BuildTestEntry
end else
	gosub BuildRoutineEntry
end
gosub WriteTestUnderTest
return

BuildTestEntry:
***************
* You cannot say "Subroutine nnn(..." and you cannot say "call nnn("
* But you CAN say "Routine = 1234; call @Routine(..."!
TestUnderTestRecord  = "subroutine X":TestId :"(Failure,Msg,Iterations,StartWall,EndWall,StartCpu,EndCpu)"
TestUnderTestRecord := CodeIntroduction
TestUnderTestRecord := "equ TEST_ID to ":TestId : @am
TestUnderTestRecord := Parts(1)
TestUnderTestRecord := LoopInitialization
* If this is blank the default is to replicate section 2 code ten times
InnerLoopCount = ScaffoldRecord<SCAFFOLD_SECTION_2_DUP_FACTOR>
if len(InnerLoopCount) = 0 then InnerLoopCount = 10
InnerLoopCount += 0
for InnerNdx = 1 to InnerLoopCount
	TestUnderTestRecord := Parts(2)
next InnerNdx
TestUnderTestRecord := LoopFinish
if len(Parts(3)) > 0 then
	TestUnderTestRecord := @am : Parts(3)
end
TestUnderTestRecord := Complete
if len(Parts(4)) > 0 then
	TestUnderTestRecord := @am : Parts(4)
end
TestUnderTestRecord := @am : "end"

return

BuildRoutineEntry:
******************
TestUnderTestRecord = Parts(1)
if TestUnderTestRecord<1> = '' then del TestUnderTestRecord<1>
ins Copyright before TestUnderTestRecord<2>
return

Initialize:
***********
Copyright = @am : "* Copyright IBM, ":oconv(date(),"DY4") : @am
return

$include Include FormatTestNumber

$include IncludeFile Scaffold_Read
$include IncludeFile TestUnderTest_Readu
$include IncludeFile TestUnderTest_Write
