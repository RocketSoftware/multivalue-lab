$INCLUDE INCLUDE UDO.H

status = UDOSetOption(2, "COMPACT")
CALL CheckStatus(status)

DIM XML.ARR(20)
DIM JSON.ARR(20, 20)
DIM OUTSTRING(20)
XMLS = 14
FAILURES = 0

XML.ARR(1) = '<e/>'
XML.ARR(2) = '<e> 	</e>'
XML.ARR(3) = '<e>true</e>'
XML.ARR(4) = '<e>1.732</e>'
XML.ARR(5) = '<e>null</e>'
XML.ARR(6) = '<e>text</e>'
XML.ARR(7) = '<e name="value" />'
XML.ARR(8) = '<e name="value"> text</e>'
XML.ARR(9) = '<e> <a>text1</a><b>text2</b> <a>text</a> </e>' 
XML.ARR(10) = '<e>text3<a>text1</a> <b>text2</b>text4<a>text</a>text5</e>'
XML.ARR(11) = '<e>1.618<a>text1</a> <b>3.141593</b>text4<a>false</a>null<a>  </a></e>'
XML.ARR(12) = '<e>tRUe<a>text1</a> <b>text2</b>True<a>text</a>FaLse</e>'
XML.ARR(13) = '<e>	text3 <a>	text1 </a> <b>text2</b>text4<a>text</a>text5</e>'
XML.ARR(14) = '<entry xmlns:app="http://www.w3.org/2007/app" xmlns:sc="http://schemas.google.com/structuredcontent/2009"> <app:control > <sc:disapproved>true</sc:disapproved> </app:control> </entry>'


* Default Settings
JSON.ARR(10,1) = '{"#text":""}'
JSON.ARR(10,2) = '{"#text":" \t"}'
JSON.ARR(10,3) = '{"#text":"true"}'
JSON.ARR(10,4) = '{"#text":"1.732"}'
JSON.ARR(10,5) = '{"#text":"null"}'
JSON.ARR(10,6) = '{"#text":"text"}'
JSON.ARR(10,7) = '{"@name":"value"}'
JSON.ARR(10,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(10,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(10,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(10,11) = '{"#text":["1.618","text4","null"],"a":["text1","false","  "],"b":"3.141593"}'
JSON.ARR(10,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(10,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(10,14) = '{"control":{"disapproved":"true"}}'

* INFERNUMBER On 
JSON.ARR(3,1) = '{"#text":""}'
JSON.ARR(3,2) = '{"#text":" \t"}'
JSON.ARR(3,3) = '{"#text":"true"}'
JSON.ARR(3,4) = '{"#text":1.732000}'
JSON.ARR(3,5) = '{"#text":"null"}'
JSON.ARR(3,6) = '{"#text":"text"}'
JSON.ARR(3,7) = '{"@name":"value"}'
JSON.ARR(3,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(3,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(3,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(3,11) = '{"#text":[1.618000,"text4","null"],"a":["text1","false","  "],"b":3.141593}'
JSON.ARR(3,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(3,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(3,14) = '{"control":{"disapproved":"true"}}'

* INFERBOOLEAN On 
JSON.ARR(4,1) = '{"#text":""}'
JSON.ARR(4,2) = '{"#text":" \t"}'
JSON.ARR(4,3) = '{"#text":true}'
JSON.ARR(4,4) = '{"#text":"1.732"}'
JSON.ARR(4,5) = '{"#text":"null"}'
JSON.ARR(4,6) = '{"#text":"text"}'
JSON.ARR(4,7) = '{"@name":"value"}'
JSON.ARR(4,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(4,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(4,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(4,11) = '{"#text":["1.618","text4","null"],"a":["text1",false,"  "],"b":"3.141593"}'
JSON.ARR(4,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(4,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(4,14) = '{"control":{"disapproved":true}}'

* INFERNULL On
JSON.ARR(5,1) = '{"#text":""}'
JSON.ARR(5,2) = '{"#text":" \t"}'
JSON.ARR(5,3) = '{"#text":"true"}'
JSON.ARR(5,4) = '{"#text":"1.732"}'
JSON.ARR(5,5) = '{"#text":null}'
JSON.ARR(5,6) = '{"#text":"text"}'
JSON.ARR(5,7) = '{"@name":"value"}'
JSON.ARR(5,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(5,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(5,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(5,11) = '{"#text":["1.618","text4",null],"a":["text1","false","  "],"b":"3.141593"}'
JSON.ARR(5,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(5,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(5,14) = '{"control":{"disapproved":"true"}}'

* EMPTY2NULL On
JSON.ARR(6,1) = '{"#text":null}'
JSON.ARR(6,2) = '{"#text":" \t"}'
JSON.ARR(6,3) = '{"#text":"true"}'
JSON.ARR(6,4) = '{"#text":"1.732"}'
JSON.ARR(6,5) = '{"#text":"null"}'
JSON.ARR(6,6) = '{"#text":"text"}'
JSON.ARR(6,7) = '{"@name":"value"}'
JSON.ARR(6,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(6,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(6,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(6,11) = '{"#text":["1.618","text4","null"],"a":["text1","false","  "],"b":"3.141593"}'
JSON.ARR(6,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(6,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(6,14) = '{"control":{"disapproved":"true"}}'

* TRIMWHITESPACE On
JSON.ARR(7,1) = '{"#text":""}'
JSON.ARR(7,2) = '{"#text":""}'
JSON.ARR(7,3) = '{"#text":"true"}'
JSON.ARR(7,4) = '{"#text":"1.732"}'
JSON.ARR(7,5) = '{"#text":"null"}'
JSON.ARR(7,6) = '{"#text":"text"}'
JSON.ARR(7,7) = '{"@name":"value"}'
JSON.ARR(7,8) = '{"@name":"value","#text":"text"}'
JSON.ARR(7,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(7,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(7,11) = '{"#text":["1.618","text4","null"],"a":["text1","false",""],"b":"3.141593"}'
JSON.ARR(7,12) = '{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(7,13) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(7,14) = '{"control":{"disapproved":"true"}}'

* CASEINSENSITIVE & INFERBOOLEAN On
JSON.ARR(8,1) = '{"#text":""}'
JSON.ARR(8,2) = '{"#text":" \t"}'
JSON.ARR(8,3) = '{"#text":true}'
JSON.ARR(8,4) = '{"#text":"1.732"}'
JSON.ARR(8,5) = '{"#text":"null"}'
JSON.ARR(8,6) = '{"#text":"text"}'
JSON.ARR(8,7) = '{"@name":"value"}'
JSON.ARR(8,8) = '{"@name":"value","#text":" text"}'
JSON.ARR(8,9) = '{"a":["text1","text"],"b":"text2"}'
JSON.ARR(8,10) = '{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}'
JSON.ARR(8,11) = '{"#text":["1.618","text4","null"],"a":["text1",false,"  "],"b":"3.141593"}'
JSON.ARR(8,12) = '{"#text":[true,true,false],"a":["text1","text"],"b":"text2"}'
JSON.ARR(8,13) = '{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}'
JSON.ARR(8,14) = '{"control":{"disapproved":true}}'

* KEEPROOT On
JSON.ARR(9,1) = '{"e":""}'
JSON.ARR(9,2) = '{"e":" \t"}'
JSON.ARR(9,3) = '{"e":"true"}'
JSON.ARR(9,4) = '{"e":"1.732"}'
JSON.ARR(9,5) = '{"e":"null"}'
JSON.ARR(9,6) = '{"e":"text"}'
JSON.ARR(9,7) = '{"e":{"@name":"value"}}'
JSON.ARR(9,8) = '{"e":{"@name":"value","#text":" text"}}'
JSON.ARR(9,9) = '{"e":{"a":["text1","text"],"b":"text2"}}'
JSON.ARR(9,10) = '{"e":{"#text":["text3","text4","text5"],"a":["text1","text"],"b":"text2"}}'
JSON.ARR(9,11) = '{"e":{"#text":["1.618","text4","null"],"a":["text1","false","  "],"b":"3.141593"}}'
JSON.ARR(9,12) = '{"e":{"#text":["tRUe","True","FaLse"],"a":["text1","text"],"b":"text2"}}'
JSON.ARR(9,13) = '{"e":{"#text":["\ttext3 ","text4","text5"],"a":["\ttext1 ","text"],"b":"text2"}}'
JSON.ARR(9,14) = '{"entry":{"control":{"disapproved":"true"}}}'

UINDEX = 10
GOSUB UNITTEST

UINDEX = 3
GOSUB UNITTEST

UINDEX = 4
GOSUB UNITTEST

UINDEX = 5
GOSUB UNITTEST

UINDEX = 6
GOSUB UNITTEST

UINDEX = 7
GOSUB UNITTEST

UINDEX = 8
GOSUB UNITTEST

UINDEX = 9
GOSUB UNITTEST

*Error Handling Test
*Unpaired element name
INVALID_XML = '<f>	text3 <a>	text1 </a> <b>text2</b>text4<a>text</a>text5</e>'

GOSUB CHECKERR

*No opening tag
INVALID_XML = '<e>	text3 </a>	text1 </a> <b>text2</b>text4<a>text</a>text5</e>'

GOSUB CHECKERR

*Invalid charater in tag name
INVALID_XML = '<e>	text3 <a>	text1 </a> <@b>text2</b>text4<a>text</a>text5</e>'

GOSUB CHECKERR

*Incorrect element nesting
INVALID_XML = '<e>	text3 <a>	text1 <b>text2 </a> </b>text4<a>text</a>text5</e>'

GOSUB CHECKERR

IF FAILURES > 0
THEN
	DISPLAY 'Total failures: ':FAILURES
END
ELSE
	DISPLAY 'Error Handling Test Success!'
END

STOP

CHECKERR:
ERRCODE = ''
ERRMSG = ''

status = UDORead(INVALID_XML, UDOFORMAT_XML, udo)
CALL CheckStatus(status)

IF ERRCODE <> 17
THEN
	DISPLAY 'Invalid XML is being treated incorrectly:'
	DISPLAY INVALID_XML
	FAILURES = FAILURES + 1
END

RETURN

UNITTEST:
COUNT = 0
SUCCESS = 0

status = UDOSetOption(3, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(4, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(5, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(6, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(7, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(8, "OFF")
CALL CheckStatus(status)
status = UDOSetOption(9, "OFF")
CALL CheckStatus(status)

BEGIN CASE
	CASE UINDEX = "3"
		status = UDOSetOption(3, "ON")
		CALL CheckStatus(status)
		MSG = 'INFERNUMBER On:'
	CASE UINDEX = "4"
		status = UDOSetOption(4, "ON")
		CALL CheckStatus(status)
		MSG = 'INFERBOOLEAN On:'
	CASE UINDEX = "5"
		status = UDOSetOption(5, "ON")
		CALL CheckStatus(status)
		MSG = 'INFERNULL On:'
	CASE UINDEX = "6"
		status = UDOSetOption(6, "ON")
		CALL CheckStatus(status)
		MSG = 'EMPTY2NULL On:'
	CASE UINDEX = "7"
		status = UDOSetOption(7, "ON")
		CALL CheckStatus(status)
		MSG = 'TRIMWHITESPACE On:'
	CASE UINDEX = "8"
		status = UDOSetOption(4, "ON")
		CALL CheckStatus(status)
		status = UDOSetOption(8, "ON")
		CALL CheckStatus(status)
		MSG = 'CASEINSENSITIVE & INFERBOOLEAN On:'
	CASE UINDEX = "9"
		status = UDOSetOption(9, "ON")
		CALL CheckStatus(status)
		MSG = 'KEEPROOT On:'
	CASE UINDEX = "10"
		MSG = 'Default Settings:'
	CASE 1
		DISPLAY "INVALID UNIT INDEX"
		STOP
END CASE

LOOP
	COUNT = COUNT + 1
UNTIL COUNT = XMLS + 1
	GOSUB XML2JSON
REPEAT

IF SUCCESS = XMLS
THEN
	DISPLAY MSG:' Success!'
END
ELSE
	DISPLAY MSG:'Failures ':(XMLS-SUCCESS)
	FAILURES = FAILURES + (XMLS-SUCCESS)
END

RETURN

XML2JSON:
status = UDORead(XML.ARR(COUNT), UDOFORMAT_XML, udo)
CALL CheckStatus(status)
status = UDOWrite(udo, UDOFORMAT_JSON, OUTSTRING(COUNT))
CALL CheckStatus(status)
IF OUTSTRING(COUNT) = JSON.ARR(UINDEX, COUNT) THEN
SUCCESS = SUCCESS +1
END
ELSE
DISPLAY "From XML -> ":OUTSTRING(COUNT)
DISPLAY "Expect JSON -> ":JSON.ARR(UINDEX, COUNT)
END

RETURN

